//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAnnotationModel.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Graphx", Namespace="http://schemas.datacontract.org/2004/07/AnnotationService.Types")]
    [System.SerializableAttribute()]
    public partial class Graphx : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebAnnotationModel.Service.Edgex[] EdgeListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] FrontierNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] InvolvedCellsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<long, AnnotationService.Types.Structure> NodeListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] ReducedEdgesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] _FrontierNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<long, WebAnnotationModel.Service.LocationInfo> locationInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<long, long> zLocationForSynapsesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebAnnotationModel.Service.Edgex[] EdgeList {
            get {
                return this.EdgeListField;
            }
            set {
                if ((object.ReferenceEquals(this.EdgeListField, value) != true)) {
                    this.EdgeListField = value;
                    this.RaisePropertyChanged("EdgeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] FrontierNodes {
            get {
                return this.FrontierNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.FrontierNodesField, value) != true)) {
                    this.FrontierNodesField = value;
                    this.RaisePropertyChanged("FrontierNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] InvolvedCells {
            get {
                return this.InvolvedCellsField;
            }
            set {
                if ((object.ReferenceEquals(this.InvolvedCellsField, value) != true)) {
                    this.InvolvedCellsField = value;
                    this.RaisePropertyChanged("InvolvedCells");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<long, AnnotationService.Types.Structure> NodeList {
            get {
                return this.NodeListField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeListField, value) != true)) {
                    this.NodeListField = value;
                    this.RaisePropertyChanged("NodeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] ReducedEdges {
            get {
                return this.ReducedEdgesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReducedEdgesField, value) != true)) {
                    this.ReducedEdgesField = value;
                    this.RaisePropertyChanged("ReducedEdges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] _FrontierNodes {
            get {
                return this._FrontierNodesField;
            }
            set {
                if ((object.ReferenceEquals(this._FrontierNodesField, value) != true)) {
                    this._FrontierNodesField = value;
                    this.RaisePropertyChanged("_FrontierNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<long, WebAnnotationModel.Service.LocationInfo> locationInfo {
            get {
                return this.locationInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.locationInfoField, value) != true)) {
                    this.locationInfoField = value;
                    this.RaisePropertyChanged("locationInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<long, long> zLocationForSynapses {
            get {
                return this.zLocationForSynapsesField;
            }
            set {
                if ((object.ReferenceEquals(this.zLocationForSynapsesField, value) != true)) {
                    this.zLocationForSynapsesField = value;
                    this.RaisePropertyChanged("zLocationForSynapses");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Edgex", Namespace="http://schemas.datacontract.org/2004/07/AnnotationService.Types")]
    [System.SerializableAttribute()]
    public partial class Edgex : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AnnotationService.Types.StructureLink LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SourceParentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TargetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TargetParentIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AnnotationService.Types.StructureLink Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceID {
            get {
                return this.SourceIDField;
            }
            set {
                if ((this.SourceIDField.Equals(value) != true)) {
                    this.SourceIDField = value;
                    this.RaisePropertyChanged("SourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceParentID {
            get {
                return this.SourceParentIDField;
            }
            set {
                if ((this.SourceParentIDField.Equals(value) != true)) {
                    this.SourceParentIDField = value;
                    this.RaisePropertyChanged("SourceParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceTypeName {
            get {
                return this.SourceTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceTypeNameField, value) != true)) {
                    this.SourceTypeNameField = value;
                    this.RaisePropertyChanged("SourceTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetID {
            get {
                return this.TargetIDField;
            }
            set {
                if ((this.TargetIDField.Equals(value) != true)) {
                    this.TargetIDField = value;
                    this.RaisePropertyChanged("TargetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetParentID {
            get {
                return this.TargetParentIDField;
            }
            set {
                if ((this.TargetParentIDField.Equals(value) != true)) {
                    this.TargetParentIDField = value;
                    this.RaisePropertyChanged("TargetParentID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationInfo", Namespace="http://schemas.datacontract.org/2004/07/AnnotationService.Types")]
    [System.SerializableAttribute()]
    public partial class LocationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Z {
            get {
                return this.ZField;
            }
            set {
                if ((this.ZField.Equals(value) != true)) {
                    this.ZField = value;
                    this.RaisePropertyChanged("Z");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynapseObject", Namespace="http://schemas.datacontract.org/2004/07/AnnotationService.Types")]
    [System.SerializableAttribute()]
    public partial class SynapseObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebAnnotationModel.Service.SynapseStats[] objListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebAnnotationModel.Service.SynapseStats[] objList {
            get {
                return this.objListField;
            }
            set {
                if ((object.ReferenceEquals(this.objListField, value) != true)) {
                    this.objListField = value;
                    this.RaisePropertyChanged("objList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynapseStats", Namespace="http://schemas.datacontract.org/2004/07/AnnotationService.Types")]
    [System.SerializableAttribute()]
    public partial class SynapseStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] synapsesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] synapses {
            get {
                return this.synapsesField;
            }
            set {
                if ((object.ReferenceEquals(this.synapsesField, value) != true)) {
                    this.synapsesField = value;
                    this.RaisePropertyChanged("synapses");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IAnnotateStructureTypes")]
    public interface IAnnotateStructureTypes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/CreateStructureType", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/CreateStructureTypeResponse")]
        AnnotationService.Types.StructureType CreateStructureType(AnnotationService.Types.StructureType obj);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/CreateStructureType", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/CreateStructureTypeResponse")]
        System.IAsyncResult BeginCreateStructureType(AnnotationService.Types.StructureType obj, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureType EndCreateStructureType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypes", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesResponse")]
        AnnotationService.Types.StructureType[] GetStructureTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypes", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesResponse")]
        System.IAsyncResult BeginGetStructureTypes(System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureType[] EndGetStructureTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypeByID", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypeByIDResponse")]
        AnnotationService.Types.StructureType GetStructureTypeByID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypeByID", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypeByIDResponse")]
        System.IAsyncResult BeginGetStructureTypeByID(long ID, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureType EndGetStructureTypeByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesByIDs", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesByIDsResponse")]
        AnnotationService.Types.StructureType[] GetStructureTypesByIDs(long[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesByIDs", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesByIDsResponse")]
        System.IAsyncResult BeginGetStructureTypesByIDs(long[] IDs, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureType[] EndGetStructureTypesByIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/UpdateStructureTypes", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/UpdateStructureTypesResponse")]
        long[] UpdateStructureTypes(AnnotationService.Types.StructureType[] structType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/UpdateStructureTypes", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/UpdateStructureTypesResponse")]
        System.IAsyncResult BeginUpdateStructureTypes(AnnotationService.Types.StructureType[] structType, System.AsyncCallback callback, object asyncState);
        
        long[] EndUpdateStructureTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/CreatePermittedStructureLink", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/CreatePermittedStructureLinkResponse")]
        AnnotationService.Types.PermittedStructureLink CreatePermittedStructureLink(AnnotationService.Types.PermittedStructureLink link);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/CreatePermittedStructureLink", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/CreatePermittedStructureLinkResponse")]
        System.IAsyncResult BeginCreatePermittedStructureLink(AnnotationService.Types.PermittedStructureLink link, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.PermittedStructureLink EndCreatePermittedStructureLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/UpdatePermittedStructureLinks", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/UpdatePermittedStructureLinksResponse")]
        void UpdatePermittedStructureLinks(AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/UpdatePermittedStructureLinks", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/UpdatePermittedStructureLinksResponse")]
        System.IAsyncResult BeginUpdatePermittedStructureLinks(AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePermittedStructureLinks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/TestMethod", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/TestMethodResponse")]
        string TestMethod();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructureTypes/TestMethod", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/TestMethodResponse")]
        System.IAsyncResult BeginTestMethod(System.AsyncCallback callback, object asyncState);
        
        string EndTestMethod(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnnotateStructureTypesChannel : WebAnnotationModel.Service.IAnnotateStructureTypes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateStructureTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateStructureTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructureTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructureTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructureTypeByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructureTypeByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructureTypesByIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructureTypesByIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateStructureTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateStructureTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreatePermittedStructureLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreatePermittedStructureLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.PermittedStructureLink Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.PermittedStructureLink)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotateStructureTypesClient : System.ServiceModel.ClientBase<WebAnnotationModel.Service.IAnnotateStructureTypes>, WebAnnotationModel.Service.IAnnotateStructureTypes {
        
        private BeginOperationDelegate onBeginCreateStructureTypeDelegate;
        
        private EndOperationDelegate onEndCreateStructureTypeDelegate;
        
        private System.Threading.SendOrPostCallback onCreateStructureTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructureTypesDelegate;
        
        private EndOperationDelegate onEndGetStructureTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructureTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructureTypeByIDDelegate;
        
        private EndOperationDelegate onEndGetStructureTypeByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructureTypeByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructureTypesByIDsDelegate;
        
        private EndOperationDelegate onEndGetStructureTypesByIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructureTypesByIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStructureTypesDelegate;
        
        private EndOperationDelegate onEndUpdateStructureTypesDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStructureTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreatePermittedStructureLinkDelegate;
        
        private EndOperationDelegate onEndCreatePermittedStructureLinkDelegate;
        
        private System.Threading.SendOrPostCallback onCreatePermittedStructureLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePermittedStructureLinksDelegate;
        
        private EndOperationDelegate onEndUpdatePermittedStructureLinksDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePermittedStructureLinksCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestMethodDelegate;
        
        private EndOperationDelegate onEndTestMethodDelegate;
        
        private System.Threading.SendOrPostCallback onTestMethodCompletedDelegate;
        
        public AnnotateStructureTypesClient() {
        }
        
        public AnnotateStructureTypesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotateStructureTypesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructureTypesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructureTypesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CreateStructureTypeCompletedEventArgs> CreateStructureTypeCompleted;
        
        public event System.EventHandler<GetStructureTypesCompletedEventArgs> GetStructureTypesCompleted;
        
        public event System.EventHandler<GetStructureTypeByIDCompletedEventArgs> GetStructureTypeByIDCompleted;
        
        public event System.EventHandler<GetStructureTypesByIDsCompletedEventArgs> GetStructureTypesByIDsCompleted;
        
        public event System.EventHandler<UpdateStructureTypesCompletedEventArgs> UpdateStructureTypesCompleted;
        
        public event System.EventHandler<CreatePermittedStructureLinkCompletedEventArgs> CreatePermittedStructureLinkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePermittedStructureLinksCompleted;
        
        public event System.EventHandler<TestMethodCompletedEventArgs> TestMethodCompleted;
        
        public AnnotationService.Types.StructureType CreateStructureType(AnnotationService.Types.StructureType obj) {
            return base.Channel.CreateStructureType(obj);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateStructureType(AnnotationService.Types.StructureType obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateStructureType(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureType EndCreateStructureType(System.IAsyncResult result) {
            return base.Channel.EndCreateStructureType(result);
        }
        
        private System.IAsyncResult OnBeginCreateStructureType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.StructureType obj = ((AnnotationService.Types.StructureType)(inValues[0]));
            return this.BeginCreateStructureType(obj, callback, asyncState);
        }
        
        private object[] OnEndCreateStructureType(System.IAsyncResult result) {
            AnnotationService.Types.StructureType retVal = this.EndCreateStructureType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateStructureTypeCompleted(object state) {
            if ((this.CreateStructureTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateStructureTypeCompleted(this, new CreateStructureTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateStructureTypeAsync(AnnotationService.Types.StructureType obj) {
            this.CreateStructureTypeAsync(obj, null);
        }
        
        public void CreateStructureTypeAsync(AnnotationService.Types.StructureType obj, object userState) {
            if ((this.onBeginCreateStructureTypeDelegate == null)) {
                this.onBeginCreateStructureTypeDelegate = new BeginOperationDelegate(this.OnBeginCreateStructureType);
            }
            if ((this.onEndCreateStructureTypeDelegate == null)) {
                this.onEndCreateStructureTypeDelegate = new EndOperationDelegate(this.OnEndCreateStructureType);
            }
            if ((this.onCreateStructureTypeCompletedDelegate == null)) {
                this.onCreateStructureTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateStructureTypeCompleted);
            }
            base.InvokeAsync(this.onBeginCreateStructureTypeDelegate, new object[] {
                        obj}, this.onEndCreateStructureTypeDelegate, this.onCreateStructureTypeCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureType[] GetStructureTypes() {
            return base.Channel.GetStructureTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructureTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructureTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureType[] EndGetStructureTypes(System.IAsyncResult result) {
            return base.Channel.EndGetStructureTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetStructureTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetStructureTypes(callback, asyncState);
        }
        
        private object[] OnEndGetStructureTypes(System.IAsyncResult result) {
            AnnotationService.Types.StructureType[] retVal = this.EndGetStructureTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructureTypesCompleted(object state) {
            if ((this.GetStructureTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructureTypesCompleted(this, new GetStructureTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructureTypesAsync() {
            this.GetStructureTypesAsync(null);
        }
        
        public void GetStructureTypesAsync(object userState) {
            if ((this.onBeginGetStructureTypesDelegate == null)) {
                this.onBeginGetStructureTypesDelegate = new BeginOperationDelegate(this.OnBeginGetStructureTypes);
            }
            if ((this.onEndGetStructureTypesDelegate == null)) {
                this.onEndGetStructureTypesDelegate = new EndOperationDelegate(this.OnEndGetStructureTypes);
            }
            if ((this.onGetStructureTypesCompletedDelegate == null)) {
                this.onGetStructureTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructureTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructureTypesDelegate, null, this.onEndGetStructureTypesDelegate, this.onGetStructureTypesCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureType GetStructureTypeByID(long ID) {
            return base.Channel.GetStructureTypeByID(ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructureTypeByID(long ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructureTypeByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureType EndGetStructureTypeByID(System.IAsyncResult result) {
            return base.Channel.EndGetStructureTypeByID(result);
        }
        
        private System.IAsyncResult OnBeginGetStructureTypeByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            return this.BeginGetStructureTypeByID(ID, callback, asyncState);
        }
        
        private object[] OnEndGetStructureTypeByID(System.IAsyncResult result) {
            AnnotationService.Types.StructureType retVal = this.EndGetStructureTypeByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructureTypeByIDCompleted(object state) {
            if ((this.GetStructureTypeByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructureTypeByIDCompleted(this, new GetStructureTypeByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructureTypeByIDAsync(long ID) {
            this.GetStructureTypeByIDAsync(ID, null);
        }
        
        public void GetStructureTypeByIDAsync(long ID, object userState) {
            if ((this.onBeginGetStructureTypeByIDDelegate == null)) {
                this.onBeginGetStructureTypeByIDDelegate = new BeginOperationDelegate(this.OnBeginGetStructureTypeByID);
            }
            if ((this.onEndGetStructureTypeByIDDelegate == null)) {
                this.onEndGetStructureTypeByIDDelegate = new EndOperationDelegate(this.OnEndGetStructureTypeByID);
            }
            if ((this.onGetStructureTypeByIDCompletedDelegate == null)) {
                this.onGetStructureTypeByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructureTypeByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructureTypeByIDDelegate, new object[] {
                        ID}, this.onEndGetStructureTypeByIDDelegate, this.onGetStructureTypeByIDCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureType[] GetStructureTypesByIDs(long[] IDs) {
            return base.Channel.GetStructureTypesByIDs(IDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructureTypesByIDs(long[] IDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructureTypesByIDs(IDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureType[] EndGetStructureTypesByIDs(System.IAsyncResult result) {
            return base.Channel.EndGetStructureTypesByIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetStructureTypesByIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] IDs = ((long[])(inValues[0]));
            return this.BeginGetStructureTypesByIDs(IDs, callback, asyncState);
        }
        
        private object[] OnEndGetStructureTypesByIDs(System.IAsyncResult result) {
            AnnotationService.Types.StructureType[] retVal = this.EndGetStructureTypesByIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructureTypesByIDsCompleted(object state) {
            if ((this.GetStructureTypesByIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructureTypesByIDsCompleted(this, new GetStructureTypesByIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructureTypesByIDsAsync(long[] IDs) {
            this.GetStructureTypesByIDsAsync(IDs, null);
        }
        
        public void GetStructureTypesByIDsAsync(long[] IDs, object userState) {
            if ((this.onBeginGetStructureTypesByIDsDelegate == null)) {
                this.onBeginGetStructureTypesByIDsDelegate = new BeginOperationDelegate(this.OnBeginGetStructureTypesByIDs);
            }
            if ((this.onEndGetStructureTypesByIDsDelegate == null)) {
                this.onEndGetStructureTypesByIDsDelegate = new EndOperationDelegate(this.OnEndGetStructureTypesByIDs);
            }
            if ((this.onGetStructureTypesByIDsCompletedDelegate == null)) {
                this.onGetStructureTypesByIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructureTypesByIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructureTypesByIDsDelegate, new object[] {
                        IDs}, this.onEndGetStructureTypesByIDsDelegate, this.onGetStructureTypesByIDsCompletedDelegate, userState);
        }
        
        public long[] UpdateStructureTypes(AnnotationService.Types.StructureType[] structType) {
            return base.Channel.UpdateStructureTypes(structType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateStructureTypes(AnnotationService.Types.StructureType[] structType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStructureTypes(structType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndUpdateStructureTypes(System.IAsyncResult result) {
            return base.Channel.EndUpdateStructureTypes(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStructureTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.StructureType[] structType = ((AnnotationService.Types.StructureType[])(inValues[0]));
            return this.BeginUpdateStructureTypes(structType, callback, asyncState);
        }
        
        private object[] OnEndUpdateStructureTypes(System.IAsyncResult result) {
            long[] retVal = this.EndUpdateStructureTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateStructureTypesCompleted(object state) {
            if ((this.UpdateStructureTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStructureTypesCompleted(this, new UpdateStructureTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStructureTypesAsync(AnnotationService.Types.StructureType[] structType) {
            this.UpdateStructureTypesAsync(structType, null);
        }
        
        public void UpdateStructureTypesAsync(AnnotationService.Types.StructureType[] structType, object userState) {
            if ((this.onBeginUpdateStructureTypesDelegate == null)) {
                this.onBeginUpdateStructureTypesDelegate = new BeginOperationDelegate(this.OnBeginUpdateStructureTypes);
            }
            if ((this.onEndUpdateStructureTypesDelegate == null)) {
                this.onEndUpdateStructureTypesDelegate = new EndOperationDelegate(this.OnEndUpdateStructureTypes);
            }
            if ((this.onUpdateStructureTypesCompletedDelegate == null)) {
                this.onUpdateStructureTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStructureTypesCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStructureTypesDelegate, new object[] {
                        structType}, this.onEndUpdateStructureTypesDelegate, this.onUpdateStructureTypesCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.PermittedStructureLink CreatePermittedStructureLink(AnnotationService.Types.PermittedStructureLink link) {
            return base.Channel.CreatePermittedStructureLink(link);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreatePermittedStructureLink(AnnotationService.Types.PermittedStructureLink link, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreatePermittedStructureLink(link, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.PermittedStructureLink EndCreatePermittedStructureLink(System.IAsyncResult result) {
            return base.Channel.EndCreatePermittedStructureLink(result);
        }
        
        private System.IAsyncResult OnBeginCreatePermittedStructureLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.PermittedStructureLink link = ((AnnotationService.Types.PermittedStructureLink)(inValues[0]));
            return this.BeginCreatePermittedStructureLink(link, callback, asyncState);
        }
        
        private object[] OnEndCreatePermittedStructureLink(System.IAsyncResult result) {
            AnnotationService.Types.PermittedStructureLink retVal = this.EndCreatePermittedStructureLink(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreatePermittedStructureLinkCompleted(object state) {
            if ((this.CreatePermittedStructureLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreatePermittedStructureLinkCompleted(this, new CreatePermittedStructureLinkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreatePermittedStructureLinkAsync(AnnotationService.Types.PermittedStructureLink link) {
            this.CreatePermittedStructureLinkAsync(link, null);
        }
        
        public void CreatePermittedStructureLinkAsync(AnnotationService.Types.PermittedStructureLink link, object userState) {
            if ((this.onBeginCreatePermittedStructureLinkDelegate == null)) {
                this.onBeginCreatePermittedStructureLinkDelegate = new BeginOperationDelegate(this.OnBeginCreatePermittedStructureLink);
            }
            if ((this.onEndCreatePermittedStructureLinkDelegate == null)) {
                this.onEndCreatePermittedStructureLinkDelegate = new EndOperationDelegate(this.OnEndCreatePermittedStructureLink);
            }
            if ((this.onCreatePermittedStructureLinkCompletedDelegate == null)) {
                this.onCreatePermittedStructureLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreatePermittedStructureLinkCompleted);
            }
            base.InvokeAsync(this.onBeginCreatePermittedStructureLinkDelegate, new object[] {
                        link}, this.onEndCreatePermittedStructureLinkDelegate, this.onCreatePermittedStructureLinkCompletedDelegate, userState);
        }
        
        public void UpdatePermittedStructureLinks(AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks) {
            base.Channel.UpdatePermittedStructureLinks(permittedStructureLinks);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdatePermittedStructureLinks(AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePermittedStructureLinks(permittedStructureLinks, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdatePermittedStructureLinks(System.IAsyncResult result) {
            base.Channel.EndUpdatePermittedStructureLinks(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePermittedStructureLinks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks = ((AnnotationService.Types.PermittedStructureLink[])(inValues[0]));
            return this.BeginUpdatePermittedStructureLinks(permittedStructureLinks, callback, asyncState);
        }
        
        private object[] OnEndUpdatePermittedStructureLinks(System.IAsyncResult result) {
            this.EndUpdatePermittedStructureLinks(result);
            return null;
        }
        
        private void OnUpdatePermittedStructureLinksCompleted(object state) {
            if ((this.UpdatePermittedStructureLinksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePermittedStructureLinksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePermittedStructureLinksAsync(AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks) {
            this.UpdatePermittedStructureLinksAsync(permittedStructureLinks, null);
        }
        
        public void UpdatePermittedStructureLinksAsync(AnnotationService.Types.PermittedStructureLink[] permittedStructureLinks, object userState) {
            if ((this.onBeginUpdatePermittedStructureLinksDelegate == null)) {
                this.onBeginUpdatePermittedStructureLinksDelegate = new BeginOperationDelegate(this.OnBeginUpdatePermittedStructureLinks);
            }
            if ((this.onEndUpdatePermittedStructureLinksDelegate == null)) {
                this.onEndUpdatePermittedStructureLinksDelegate = new EndOperationDelegate(this.OnEndUpdatePermittedStructureLinks);
            }
            if ((this.onUpdatePermittedStructureLinksCompletedDelegate == null)) {
                this.onUpdatePermittedStructureLinksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePermittedStructureLinksCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePermittedStructureLinksDelegate, new object[] {
                        permittedStructureLinks}, this.onEndUpdatePermittedStructureLinksDelegate, this.onUpdatePermittedStructureLinksCompletedDelegate, userState);
        }
        
        public string TestMethod() {
            return base.Channel.TestMethod();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestMethod(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestMethod(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTestMethod(System.IAsyncResult result) {
            return base.Channel.EndTestMethod(result);
        }
        
        private System.IAsyncResult OnBeginTestMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestMethod(callback, asyncState);
        }
        
        private object[] OnEndTestMethod(System.IAsyncResult result) {
            string retVal = this.EndTestMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestMethodCompleted(object state) {
            if ((this.TestMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestMethodCompleted(this, new TestMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestMethodAsync() {
            this.TestMethodAsync(null);
        }
        
        public void TestMethodAsync(object userState) {
            if ((this.onBeginTestMethodDelegate == null)) {
                this.onBeginTestMethodDelegate = new BeginOperationDelegate(this.OnBeginTestMethod);
            }
            if ((this.onEndTestMethodDelegate == null)) {
                this.onEndTestMethodDelegate = new EndOperationDelegate(this.OnEndTestMethod);
            }
            if ((this.onTestMethodCompletedDelegate == null)) {
                this.onTestMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestMethodCompleted);
            }
            base.InvokeAsync(this.onBeginTestMethodDelegate, null, this.onEndTestMethodDelegate, this.onTestMethodCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IAnnotateStructures")]
    public interface IAnnotateStructures {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/CreateStructure", ReplyAction="http://tempuri.org/IAnnotateStructures/CreateStructureResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AnnotationService.Types.LocationHistory))]
        AnnotationService.Types.CreateStructureRetval CreateStructure(AnnotationService.Types.Structure structure, AnnotationService.Types.Location location);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/CreateStructure", ReplyAction="http://tempuri.org/IAnnotateStructures/CreateStructureResponse")]
        System.IAsyncResult BeginCreateStructure(AnnotationService.Types.Structure structure, AnnotationService.Types.Location location, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.CreateStructureRetval EndCreateStructure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresResponse")]
        AnnotationService.Types.Structure[] GetStructures();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresResponse")]
        System.IAsyncResult BeginGetStructures(System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSection", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionResponse")]
        AnnotationService.Types.Structure[] GetStructuresForSection(out long QueryExecutedTime, out long[] DeletedIDs, long Section, long ModifiedAfterThisTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSection", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionResponse")]
        System.IAsyncResult BeginGetStructuresForSection(long Section, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructuresForSection(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInMosaicRegionRespo" +
            "nse")]
        AnnotationService.Types.Structure[] GetStructuresForSectionInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInMosaicRegionRespo" +
            "nse")]
        System.IAsyncResult BeginGetStructuresForSectionInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructuresForSectionInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInVolumeRegion", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInVolumeRegionRespo" +
            "nse")]
        AnnotationService.Types.Structure[] GetStructuresForSectionInVolumeRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInVolumeRegion", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionInVolumeRegionRespo" +
            "nse")]
        System.IAsyncResult BeginGetStructuresForSectionInVolumeRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructuresForSectionInVolumeRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructureByID", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureByIDResponse")]
        AnnotationService.Types.Structure GetStructureByID(long ID, bool IncludeChildren);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructureByID", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureByIDResponse")]
        System.IAsyncResult BeginGetStructureByID(long ID, bool IncludeChildren, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure EndGetStructureByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresByIDs", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresByIDsResponse")]
        AnnotationService.Types.Structure[] GetStructuresByIDs(long[] ID, bool IncludeChildren);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructuresByIDs", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresByIDsResponse")]
        System.IAsyncResult BeginGetStructuresByIDs(long[] ID, bool IncludeChildren, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructuresByIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/CreateStructureLink", ReplyAction="http://tempuri.org/IAnnotateStructures/CreateStructureLinkResponse")]
        AnnotationService.Types.StructureLink CreateStructureLink(AnnotationService.Types.StructureLink link);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/CreateStructureLink", ReplyAction="http://tempuri.org/IAnnotateStructures/CreateStructureLinkResponse")]
        System.IAsyncResult BeginCreateStructureLink(AnnotationService.Types.StructureLink link, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureLink EndCreateStructureLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetLinkedStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresResponse")]
        AnnotationService.Types.StructureLink[] GetLinkedStructures();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetLinkedStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresResponse")]
        System.IAsyncResult BeginGetLinkedStructures(System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureLink[] EndGetLinkedStructures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresByID", ReplyAction="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresByIDResponse")]
        AnnotationService.Types.StructureLink[] GetLinkedStructuresByID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresByID", ReplyAction="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresByIDResponse")]
        System.IAsyncResult BeginGetLinkedStructuresByID(long ID, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureLink[] EndGetLinkedStructuresByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetNetworkedStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetNetworkedStructuresResponse")]
        long[] GetNetworkedStructures(long[] IDs, int numHops);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetNetworkedStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetNetworkedStructuresResponse")]
        System.IAsyncResult BeginGetNetworkedStructures(long[] IDs, int numHops, System.AsyncCallback callback, object asyncState);
        
        long[] EndGetNetworkedStructures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetChildStructuresInNetwork", ReplyAction="http://tempuri.org/IAnnotateStructures/GetChildStructuresInNetworkResponse")]
        AnnotationService.Types.Structure[] GetChildStructuresInNetwork(long[] IDs, int numHops);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetChildStructuresInNetwork", ReplyAction="http://tempuri.org/IAnnotateStructures/GetChildStructuresInNetworkResponse")]
        System.IAsyncResult BeginGetChildStructuresInNetwork(long[] IDs, int numHops, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetChildStructuresInNetwork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructureLinksInNetwork", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureLinksInNetworkResponse")]
        AnnotationService.Types.StructureLink[] GetStructureLinksInNetwork(long[] IDs, int numHops);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructureLinksInNetwork", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureLinksInNetworkResponse")]
        System.IAsyncResult BeginGetStructureLinksInNetwork(long[] IDs, int numHops, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.StructureLink[] EndGetStructureLinksInNetwork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/NumberOfLocationsForStructure", ReplyAction="http://tempuri.org/IAnnotateStructures/NumberOfLocationsForStructureResponse")]
        long NumberOfLocationsForStructure(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/NumberOfLocationsForStructure", ReplyAction="http://tempuri.org/IAnnotateStructures/NumberOfLocationsForStructureResponse")]
        System.IAsyncResult BeginNumberOfLocationsForStructure(long structureID, System.AsyncCallback callback, object asyncState);
        
        long EndNumberOfLocationsForStructure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/UpdateStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/UpdateStructuresResponse")]
        long[] UpdateStructures(AnnotationService.Types.Structure[] structure);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/UpdateStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/UpdateStructuresResponse")]
        System.IAsyncResult BeginUpdateStructures(AnnotationService.Types.Structure[] structure, System.AsyncCallback callback, object asyncState);
        
        long[] EndUpdateStructures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/UpdateStructureLinks", ReplyAction="http://tempuri.org/IAnnotateStructures/UpdateStructureLinksResponse")]
        void UpdateStructureLinks(AnnotationService.Types.StructureLink[] structureLinks);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/UpdateStructureLinks", ReplyAction="http://tempuri.org/IAnnotateStructures/UpdateStructureLinksResponse")]
        System.IAsyncResult BeginUpdateStructureLinks(AnnotationService.Types.StructureLink[] structureLinks, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateStructureLinks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocations", ReplyAction="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsResponse")]
        long[] GetUnfinishedLocations(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocations", ReplyAction="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsResponse")]
        System.IAsyncResult BeginGetUnfinishedLocations(long structureID, System.AsyncCallback callback, object asyncState);
        
        long[] EndGetUnfinishedLocations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsWithPosition", ReplyAction="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsWithPositionResponse" +
            "")]
        AnnotationService.Types.LocationPositionOnly[] GetUnfinishedLocationsWithPosition(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsWithPosition", ReplyAction="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsWithPositionResponse" +
            "")]
        System.IAsyncResult BeginGetUnfinishedLocationsWithPosition(long structureID, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.LocationPositionOnly[] EndGetUnfinishedLocationsWithPosition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresOfType", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresOfTypeResponse")]
        AnnotationService.Types.Structure[] GetStructuresOfType(long typeID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructuresOfType", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresOfTypeResponse")]
        System.IAsyncResult BeginGetStructuresOfType(long typeID, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructuresOfType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/Merge", ReplyAction="http://tempuri.org/IAnnotateStructures/MergeResponse")]
        long Merge(long KeepID, long MergeID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/Merge", ReplyAction="http://tempuri.org/IAnnotateStructures/MergeResponse")]
        System.IAsyncResult BeginMerge(long KeepID, long MergeID, System.AsyncCallback callback, object asyncState);
        
        long EndMerge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/Split", ReplyAction="http://tempuri.org/IAnnotateStructures/SplitResponse")]
        long Split(long StructureA, long LocationIDInSplitStructure);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/Split", ReplyAction="http://tempuri.org/IAnnotateStructures/SplitResponse")]
        System.IAsyncResult BeginSplit(long StructureA, long LocationIDInSplitStructure, System.AsyncCallback callback, object asyncState);
        
        long EndSplit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/SplitAtLocationLink", ReplyAction="http://tempuri.org/IAnnotateStructures/SplitAtLocationLinkResponse")]
        long SplitAtLocationLink(long LocationIDOfKeepStructure, long LocationIDOfSplitStructure);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/SplitAtLocationLink", ReplyAction="http://tempuri.org/IAnnotateStructures/SplitAtLocationLinkResponse")]
        System.IAsyncResult BeginSplitAtLocationLink(long LocationIDOfKeepStructure, long LocationIDOfSplitStructure, System.AsyncCallback callback, object asyncState);
        
        long EndSplitAtLocationLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructureChangeLog", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureChangeLogResponse")]
        AnnotationService.Types.Structure[] GetStructureChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateStructures/GetStructureChangeLog", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureChangeLogResponse")]
        System.IAsyncResult BeginGetStructureChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Structure[] EndGetStructureChangeLog(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnnotateStructuresChannel : WebAnnotationModel.Service.IAnnotateStructures, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.CreateStructureRetval Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.CreateStructureRetval)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructuresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructuresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructuresForSectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructuresForSectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long[] DeletedIDs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructuresForSectionInMosaicRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructuresForSectionInMosaicRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long[] DeletedIDs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructuresForSectionInVolumeRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructuresForSectionInVolumeRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long[] DeletedIDs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructureByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructureByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Structure Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructuresByIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructuresByIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateStructureLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateStructureLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureLink Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureLink)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLinkedStructuresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLinkedStructuresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureLink[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureLink[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLinkedStructuresByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLinkedStructuresByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureLink[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureLink[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNetworkedStructuresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNetworkedStructuresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChildStructuresInNetworkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChildStructuresInNetworkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructureLinksInNetworkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructureLinksInNetworkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.StructureLink[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.StructureLink[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NumberOfLocationsForStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NumberOfLocationsForStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateStructuresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateStructuresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnfinishedLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnfinishedLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnfinishedLocationsWithPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnfinishedLocationsWithPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.LocationPositionOnly[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.LocationPositionOnly[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructuresOfTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructuresOfTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SplitAtLocationLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SplitAtLocationLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStructureChangeLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStructureChangeLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Structure[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Structure[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotateStructuresClient : System.ServiceModel.ClientBase<WebAnnotationModel.Service.IAnnotateStructures>, WebAnnotationModel.Service.IAnnotateStructures {
        
        private BeginOperationDelegate onBeginCreateStructureDelegate;
        
        private EndOperationDelegate onEndCreateStructureDelegate;
        
        private System.Threading.SendOrPostCallback onCreateStructureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructuresDelegate;
        
        private EndOperationDelegate onEndGetStructuresDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructuresCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructuresForSectionDelegate;
        
        private EndOperationDelegate onEndGetStructuresForSectionDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructuresForSectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructuresForSectionInMosaicRegionDelegate;
        
        private EndOperationDelegate onEndGetStructuresForSectionInMosaicRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructuresForSectionInMosaicRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructuresForSectionInVolumeRegionDelegate;
        
        private EndOperationDelegate onEndGetStructuresForSectionInVolumeRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructuresForSectionInVolumeRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructureByIDDelegate;
        
        private EndOperationDelegate onEndGetStructureByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructureByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructuresByIDsDelegate;
        
        private EndOperationDelegate onEndGetStructuresByIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructuresByIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateStructureLinkDelegate;
        
        private EndOperationDelegate onEndCreateStructureLinkDelegate;
        
        private System.Threading.SendOrPostCallback onCreateStructureLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLinkedStructuresDelegate;
        
        private EndOperationDelegate onEndGetLinkedStructuresDelegate;
        
        private System.Threading.SendOrPostCallback onGetLinkedStructuresCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLinkedStructuresByIDDelegate;
        
        private EndOperationDelegate onEndGetLinkedStructuresByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetLinkedStructuresByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNetworkedStructuresDelegate;
        
        private EndOperationDelegate onEndGetNetworkedStructuresDelegate;
        
        private System.Threading.SendOrPostCallback onGetNetworkedStructuresCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChildStructuresInNetworkDelegate;
        
        private EndOperationDelegate onEndGetChildStructuresInNetworkDelegate;
        
        private System.Threading.SendOrPostCallback onGetChildStructuresInNetworkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructureLinksInNetworkDelegate;
        
        private EndOperationDelegate onEndGetStructureLinksInNetworkDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructureLinksInNetworkCompletedDelegate;
        
        private BeginOperationDelegate onBeginNumberOfLocationsForStructureDelegate;
        
        private EndOperationDelegate onEndNumberOfLocationsForStructureDelegate;
        
        private System.Threading.SendOrPostCallback onNumberOfLocationsForStructureCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStructuresDelegate;
        
        private EndOperationDelegate onEndUpdateStructuresDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStructuresCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStructureLinksDelegate;
        
        private EndOperationDelegate onEndUpdateStructureLinksDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStructureLinksCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnfinishedLocationsDelegate;
        
        private EndOperationDelegate onEndGetUnfinishedLocationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnfinishedLocationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnfinishedLocationsWithPositionDelegate;
        
        private EndOperationDelegate onEndGetUnfinishedLocationsWithPositionDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnfinishedLocationsWithPositionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructuresOfTypeDelegate;
        
        private EndOperationDelegate onEndGetStructuresOfTypeDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructuresOfTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginMergeDelegate;
        
        private EndOperationDelegate onEndMergeDelegate;
        
        private System.Threading.SendOrPostCallback onMergeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitDelegate;
        
        private EndOperationDelegate onEndSplitDelegate;
        
        private System.Threading.SendOrPostCallback onSplitCompletedDelegate;
        
        private BeginOperationDelegate onBeginSplitAtLocationLinkDelegate;
        
        private EndOperationDelegate onEndSplitAtLocationLinkDelegate;
        
        private System.Threading.SendOrPostCallback onSplitAtLocationLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStructureChangeLogDelegate;
        
        private EndOperationDelegate onEndGetStructureChangeLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetStructureChangeLogCompletedDelegate;
        
        public AnnotateStructuresClient() {
        }
        
        public AnnotateStructuresClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotateStructuresClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructuresClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructuresClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CreateStructureCompletedEventArgs> CreateStructureCompleted;
        
        public event System.EventHandler<GetStructuresCompletedEventArgs> GetStructuresCompleted;
        
        public event System.EventHandler<GetStructuresForSectionCompletedEventArgs> GetStructuresForSectionCompleted;
        
        public event System.EventHandler<GetStructuresForSectionInMosaicRegionCompletedEventArgs> GetStructuresForSectionInMosaicRegionCompleted;
        
        public event System.EventHandler<GetStructuresForSectionInVolumeRegionCompletedEventArgs> GetStructuresForSectionInVolumeRegionCompleted;
        
        public event System.EventHandler<GetStructureByIDCompletedEventArgs> GetStructureByIDCompleted;
        
        public event System.EventHandler<GetStructuresByIDsCompletedEventArgs> GetStructuresByIDsCompleted;
        
        public event System.EventHandler<CreateStructureLinkCompletedEventArgs> CreateStructureLinkCompleted;
        
        public event System.EventHandler<GetLinkedStructuresCompletedEventArgs> GetLinkedStructuresCompleted;
        
        public event System.EventHandler<GetLinkedStructuresByIDCompletedEventArgs> GetLinkedStructuresByIDCompleted;
        
        public event System.EventHandler<GetNetworkedStructuresCompletedEventArgs> GetNetworkedStructuresCompleted;
        
        public event System.EventHandler<GetChildStructuresInNetworkCompletedEventArgs> GetChildStructuresInNetworkCompleted;
        
        public event System.EventHandler<GetStructureLinksInNetworkCompletedEventArgs> GetStructureLinksInNetworkCompleted;
        
        public event System.EventHandler<NumberOfLocationsForStructureCompletedEventArgs> NumberOfLocationsForStructureCompleted;
        
        public event System.EventHandler<UpdateStructuresCompletedEventArgs> UpdateStructuresCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateStructureLinksCompleted;
        
        public event System.EventHandler<GetUnfinishedLocationsCompletedEventArgs> GetUnfinishedLocationsCompleted;
        
        public event System.EventHandler<GetUnfinishedLocationsWithPositionCompletedEventArgs> GetUnfinishedLocationsWithPositionCompleted;
        
        public event System.EventHandler<GetStructuresOfTypeCompletedEventArgs> GetStructuresOfTypeCompleted;
        
        public event System.EventHandler<MergeCompletedEventArgs> MergeCompleted;
        
        public event System.EventHandler<SplitCompletedEventArgs> SplitCompleted;
        
        public event System.EventHandler<SplitAtLocationLinkCompletedEventArgs> SplitAtLocationLinkCompleted;
        
        public event System.EventHandler<GetStructureChangeLogCompletedEventArgs> GetStructureChangeLogCompleted;
        
        public AnnotationService.Types.CreateStructureRetval CreateStructure(AnnotationService.Types.Structure structure, AnnotationService.Types.Location location) {
            return base.Channel.CreateStructure(structure, location);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateStructure(AnnotationService.Types.Structure structure, AnnotationService.Types.Location location, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateStructure(structure, location, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.CreateStructureRetval EndCreateStructure(System.IAsyncResult result) {
            return base.Channel.EndCreateStructure(result);
        }
        
        private System.IAsyncResult OnBeginCreateStructure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.Structure structure = ((AnnotationService.Types.Structure)(inValues[0]));
            AnnotationService.Types.Location location = ((AnnotationService.Types.Location)(inValues[1]));
            return this.BeginCreateStructure(structure, location, callback, asyncState);
        }
        
        private object[] OnEndCreateStructure(System.IAsyncResult result) {
            AnnotationService.Types.CreateStructureRetval retVal = this.EndCreateStructure(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateStructureCompleted(object state) {
            if ((this.CreateStructureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateStructureCompleted(this, new CreateStructureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateStructureAsync(AnnotationService.Types.Structure structure, AnnotationService.Types.Location location) {
            this.CreateStructureAsync(structure, location, null);
        }
        
        public void CreateStructureAsync(AnnotationService.Types.Structure structure, AnnotationService.Types.Location location, object userState) {
            if ((this.onBeginCreateStructureDelegate == null)) {
                this.onBeginCreateStructureDelegate = new BeginOperationDelegate(this.OnBeginCreateStructure);
            }
            if ((this.onEndCreateStructureDelegate == null)) {
                this.onEndCreateStructureDelegate = new EndOperationDelegate(this.OnEndCreateStructure);
            }
            if ((this.onCreateStructureCompletedDelegate == null)) {
                this.onCreateStructureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateStructureCompleted);
            }
            base.InvokeAsync(this.onBeginCreateStructureDelegate, new object[] {
                        structure,
                        location}, this.onEndCreateStructureDelegate, this.onCreateStructureCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructures() {
            return base.Channel.GetStructures();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructures(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructures(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructures(System.IAsyncResult result) {
            return base.Channel.EndGetStructures(result);
        }
        
        private System.IAsyncResult OnBeginGetStructures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetStructures(callback, asyncState);
        }
        
        private object[] OnEndGetStructures(System.IAsyncResult result) {
            AnnotationService.Types.Structure[] retVal = this.EndGetStructures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructuresCompleted(object state) {
            if ((this.GetStructuresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructuresCompleted(this, new GetStructuresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructuresAsync() {
            this.GetStructuresAsync(null);
        }
        
        public void GetStructuresAsync(object userState) {
            if ((this.onBeginGetStructuresDelegate == null)) {
                this.onBeginGetStructuresDelegate = new BeginOperationDelegate(this.OnBeginGetStructures);
            }
            if ((this.onEndGetStructuresDelegate == null)) {
                this.onEndGetStructuresDelegate = new EndOperationDelegate(this.OnEndGetStructures);
            }
            if ((this.onGetStructuresCompletedDelegate == null)) {
                this.onGetStructuresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructuresCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructuresDelegate, null, this.onEndGetStructuresDelegate, this.onGetStructuresCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructuresForSection(out long QueryExecutedTime, out long[] DeletedIDs, long Section, long ModifiedAfterThisTime) {
            return base.Channel.GetStructuresForSection(out QueryExecutedTime, out DeletedIDs, Section, ModifiedAfterThisTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructuresForSection(long Section, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructuresForSection(Section, ModifiedAfterThisTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructuresForSection(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result) {
            return base.Channel.EndGetStructuresForSection(out QueryExecutedTime, out DeletedIDs, result);
        }
        
        private System.IAsyncResult OnBeginGetStructuresForSection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long Section = ((long)(inValues[0]));
            long ModifiedAfterThisTime = ((long)(inValues[1]));
            return this.BeginGetStructuresForSection(Section, ModifiedAfterThisTime, callback, asyncState);
        }
        
        private object[] OnEndGetStructuresForSection(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            long[] DeletedIDs = this.GetDefaultValueForInitialization<long[]>();
            AnnotationService.Types.Structure[] retVal = this.EndGetStructuresForSection(out QueryExecutedTime, out DeletedIDs, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedIDs,
                    retVal};
        }
        
        private void OnGetStructuresForSectionCompleted(object state) {
            if ((this.GetStructuresForSectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructuresForSectionCompleted(this, new GetStructuresForSectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructuresForSectionAsync(long Section, long ModifiedAfterThisTime) {
            this.GetStructuresForSectionAsync(Section, ModifiedAfterThisTime, null);
        }
        
        public void GetStructuresForSectionAsync(long Section, long ModifiedAfterThisTime, object userState) {
            if ((this.onBeginGetStructuresForSectionDelegate == null)) {
                this.onBeginGetStructuresForSectionDelegate = new BeginOperationDelegate(this.OnBeginGetStructuresForSection);
            }
            if ((this.onEndGetStructuresForSectionDelegate == null)) {
                this.onEndGetStructuresForSectionDelegate = new EndOperationDelegate(this.OnEndGetStructuresForSection);
            }
            if ((this.onGetStructuresForSectionCompletedDelegate == null)) {
                this.onGetStructuresForSectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructuresForSectionCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructuresForSectionDelegate, new object[] {
                        Section,
                        ModifiedAfterThisTime}, this.onEndGetStructuresForSectionDelegate, this.onGetStructuresForSectionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructuresForSectionInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime) {
            return base.Channel.GetStructuresForSectionInMosaicRegion(out QueryExecutedTime, out DeletedIDs, section, bbox, MinRadius, ModifiedAfterThisTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructuresForSectionInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructuresForSectionInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructuresForSectionInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result) {
            return base.Channel.EndGetStructuresForSectionInMosaicRegion(out QueryExecutedTime, out DeletedIDs, result);
        }
        
        private System.IAsyncResult OnBeginGetStructuresForSectionInMosaicRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            AnnotationService.Types.BoundingRectangle bbox = ((AnnotationService.Types.BoundingRectangle)(inValues[1]));
            double MinRadius = ((double)(inValues[2]));
            long ModifiedAfterThisTime = ((long)(inValues[3]));
            return this.BeginGetStructuresForSectionInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisTime, callback, asyncState);
        }
        
        private object[] OnEndGetStructuresForSectionInMosaicRegion(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            long[] DeletedIDs = this.GetDefaultValueForInitialization<long[]>();
            AnnotationService.Types.Structure[] retVal = this.EndGetStructuresForSectionInMosaicRegion(out QueryExecutedTime, out DeletedIDs, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedIDs,
                    retVal};
        }
        
        private void OnGetStructuresForSectionInMosaicRegionCompleted(object state) {
            if ((this.GetStructuresForSectionInMosaicRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructuresForSectionInMosaicRegionCompleted(this, new GetStructuresForSectionInMosaicRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructuresForSectionInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime) {
            this.GetStructuresForSectionInMosaicRegionAsync(section, bbox, MinRadius, ModifiedAfterThisTime, null);
        }
        
        public void GetStructuresForSectionInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime, object userState) {
            if ((this.onBeginGetStructuresForSectionInMosaicRegionDelegate == null)) {
                this.onBeginGetStructuresForSectionInMosaicRegionDelegate = new BeginOperationDelegate(this.OnBeginGetStructuresForSectionInMosaicRegion);
            }
            if ((this.onEndGetStructuresForSectionInMosaicRegionDelegate == null)) {
                this.onEndGetStructuresForSectionInMosaicRegionDelegate = new EndOperationDelegate(this.OnEndGetStructuresForSectionInMosaicRegion);
            }
            if ((this.onGetStructuresForSectionInMosaicRegionCompletedDelegate == null)) {
                this.onGetStructuresForSectionInMosaicRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructuresForSectionInMosaicRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructuresForSectionInMosaicRegionDelegate, new object[] {
                        section,
                        bbox,
                        MinRadius,
                        ModifiedAfterThisTime}, this.onEndGetStructuresForSectionInMosaicRegionDelegate, this.onGetStructuresForSectionInMosaicRegionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructuresForSectionInVolumeRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime) {
            return base.Channel.GetStructuresForSectionInVolumeRegion(out QueryExecutedTime, out DeletedIDs, section, bbox, MinRadius, ModifiedAfterThisTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructuresForSectionInVolumeRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructuresForSectionInVolumeRegion(section, bbox, MinRadius, ModifiedAfterThisTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructuresForSectionInVolumeRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result) {
            return base.Channel.EndGetStructuresForSectionInVolumeRegion(out QueryExecutedTime, out DeletedIDs, result);
        }
        
        private System.IAsyncResult OnBeginGetStructuresForSectionInVolumeRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            AnnotationService.Types.BoundingRectangle bbox = ((AnnotationService.Types.BoundingRectangle)(inValues[1]));
            double MinRadius = ((double)(inValues[2]));
            long ModifiedAfterThisTime = ((long)(inValues[3]));
            return this.BeginGetStructuresForSectionInVolumeRegion(section, bbox, MinRadius, ModifiedAfterThisTime, callback, asyncState);
        }
        
        private object[] OnEndGetStructuresForSectionInVolumeRegion(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            long[] DeletedIDs = this.GetDefaultValueForInitialization<long[]>();
            AnnotationService.Types.Structure[] retVal = this.EndGetStructuresForSectionInVolumeRegion(out QueryExecutedTime, out DeletedIDs, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedIDs,
                    retVal};
        }
        
        private void OnGetStructuresForSectionInVolumeRegionCompleted(object state) {
            if ((this.GetStructuresForSectionInVolumeRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructuresForSectionInVolumeRegionCompleted(this, new GetStructuresForSectionInVolumeRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructuresForSectionInVolumeRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime) {
            this.GetStructuresForSectionInVolumeRegionAsync(section, bbox, MinRadius, ModifiedAfterThisTime, null);
        }
        
        public void GetStructuresForSectionInVolumeRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisTime, object userState) {
            if ((this.onBeginGetStructuresForSectionInVolumeRegionDelegate == null)) {
                this.onBeginGetStructuresForSectionInVolumeRegionDelegate = new BeginOperationDelegate(this.OnBeginGetStructuresForSectionInVolumeRegion);
            }
            if ((this.onEndGetStructuresForSectionInVolumeRegionDelegate == null)) {
                this.onEndGetStructuresForSectionInVolumeRegionDelegate = new EndOperationDelegate(this.OnEndGetStructuresForSectionInVolumeRegion);
            }
            if ((this.onGetStructuresForSectionInVolumeRegionCompletedDelegate == null)) {
                this.onGetStructuresForSectionInVolumeRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructuresForSectionInVolumeRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructuresForSectionInVolumeRegionDelegate, new object[] {
                        section,
                        bbox,
                        MinRadius,
                        ModifiedAfterThisTime}, this.onEndGetStructuresForSectionInVolumeRegionDelegate, this.onGetStructuresForSectionInVolumeRegionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure GetStructureByID(long ID, bool IncludeChildren) {
            return base.Channel.GetStructureByID(ID, IncludeChildren);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructureByID(long ID, bool IncludeChildren, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructureByID(ID, IncludeChildren, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure EndGetStructureByID(System.IAsyncResult result) {
            return base.Channel.EndGetStructureByID(result);
        }
        
        private System.IAsyncResult OnBeginGetStructureByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            bool IncludeChildren = ((bool)(inValues[1]));
            return this.BeginGetStructureByID(ID, IncludeChildren, callback, asyncState);
        }
        
        private object[] OnEndGetStructureByID(System.IAsyncResult result) {
            AnnotationService.Types.Structure retVal = this.EndGetStructureByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructureByIDCompleted(object state) {
            if ((this.GetStructureByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructureByIDCompleted(this, new GetStructureByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructureByIDAsync(long ID, bool IncludeChildren) {
            this.GetStructureByIDAsync(ID, IncludeChildren, null);
        }
        
        public void GetStructureByIDAsync(long ID, bool IncludeChildren, object userState) {
            if ((this.onBeginGetStructureByIDDelegate == null)) {
                this.onBeginGetStructureByIDDelegate = new BeginOperationDelegate(this.OnBeginGetStructureByID);
            }
            if ((this.onEndGetStructureByIDDelegate == null)) {
                this.onEndGetStructureByIDDelegate = new EndOperationDelegate(this.OnEndGetStructureByID);
            }
            if ((this.onGetStructureByIDCompletedDelegate == null)) {
                this.onGetStructureByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructureByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructureByIDDelegate, new object[] {
                        ID,
                        IncludeChildren}, this.onEndGetStructureByIDDelegate, this.onGetStructureByIDCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructuresByIDs(long[] ID, bool IncludeChildren) {
            return base.Channel.GetStructuresByIDs(ID, IncludeChildren);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructuresByIDs(long[] ID, bool IncludeChildren, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructuresByIDs(ID, IncludeChildren, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructuresByIDs(System.IAsyncResult result) {
            return base.Channel.EndGetStructuresByIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetStructuresByIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] ID = ((long[])(inValues[0]));
            bool IncludeChildren = ((bool)(inValues[1]));
            return this.BeginGetStructuresByIDs(ID, IncludeChildren, callback, asyncState);
        }
        
        private object[] OnEndGetStructuresByIDs(System.IAsyncResult result) {
            AnnotationService.Types.Structure[] retVal = this.EndGetStructuresByIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructuresByIDsCompleted(object state) {
            if ((this.GetStructuresByIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructuresByIDsCompleted(this, new GetStructuresByIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructuresByIDsAsync(long[] ID, bool IncludeChildren) {
            this.GetStructuresByIDsAsync(ID, IncludeChildren, null);
        }
        
        public void GetStructuresByIDsAsync(long[] ID, bool IncludeChildren, object userState) {
            if ((this.onBeginGetStructuresByIDsDelegate == null)) {
                this.onBeginGetStructuresByIDsDelegate = new BeginOperationDelegate(this.OnBeginGetStructuresByIDs);
            }
            if ((this.onEndGetStructuresByIDsDelegate == null)) {
                this.onEndGetStructuresByIDsDelegate = new EndOperationDelegate(this.OnEndGetStructuresByIDs);
            }
            if ((this.onGetStructuresByIDsCompletedDelegate == null)) {
                this.onGetStructuresByIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructuresByIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructuresByIDsDelegate, new object[] {
                        ID,
                        IncludeChildren}, this.onEndGetStructuresByIDsDelegate, this.onGetStructuresByIDsCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureLink CreateStructureLink(AnnotationService.Types.StructureLink link) {
            return base.Channel.CreateStructureLink(link);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateStructureLink(AnnotationService.Types.StructureLink link, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateStructureLink(link, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureLink EndCreateStructureLink(System.IAsyncResult result) {
            return base.Channel.EndCreateStructureLink(result);
        }
        
        private System.IAsyncResult OnBeginCreateStructureLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.StructureLink link = ((AnnotationService.Types.StructureLink)(inValues[0]));
            return this.BeginCreateStructureLink(link, callback, asyncState);
        }
        
        private object[] OnEndCreateStructureLink(System.IAsyncResult result) {
            AnnotationService.Types.StructureLink retVal = this.EndCreateStructureLink(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateStructureLinkCompleted(object state) {
            if ((this.CreateStructureLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateStructureLinkCompleted(this, new CreateStructureLinkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateStructureLinkAsync(AnnotationService.Types.StructureLink link) {
            this.CreateStructureLinkAsync(link, null);
        }
        
        public void CreateStructureLinkAsync(AnnotationService.Types.StructureLink link, object userState) {
            if ((this.onBeginCreateStructureLinkDelegate == null)) {
                this.onBeginCreateStructureLinkDelegate = new BeginOperationDelegate(this.OnBeginCreateStructureLink);
            }
            if ((this.onEndCreateStructureLinkDelegate == null)) {
                this.onEndCreateStructureLinkDelegate = new EndOperationDelegate(this.OnEndCreateStructureLink);
            }
            if ((this.onCreateStructureLinkCompletedDelegate == null)) {
                this.onCreateStructureLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateStructureLinkCompleted);
            }
            base.InvokeAsync(this.onBeginCreateStructureLinkDelegate, new object[] {
                        link}, this.onEndCreateStructureLinkDelegate, this.onCreateStructureLinkCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureLink[] GetLinkedStructures() {
            return base.Channel.GetLinkedStructures();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLinkedStructures(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLinkedStructures(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureLink[] EndGetLinkedStructures(System.IAsyncResult result) {
            return base.Channel.EndGetLinkedStructures(result);
        }
        
        private System.IAsyncResult OnBeginGetLinkedStructures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLinkedStructures(callback, asyncState);
        }
        
        private object[] OnEndGetLinkedStructures(System.IAsyncResult result) {
            AnnotationService.Types.StructureLink[] retVal = this.EndGetLinkedStructures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLinkedStructuresCompleted(object state) {
            if ((this.GetLinkedStructuresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLinkedStructuresCompleted(this, new GetLinkedStructuresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLinkedStructuresAsync() {
            this.GetLinkedStructuresAsync(null);
        }
        
        public void GetLinkedStructuresAsync(object userState) {
            if ((this.onBeginGetLinkedStructuresDelegate == null)) {
                this.onBeginGetLinkedStructuresDelegate = new BeginOperationDelegate(this.OnBeginGetLinkedStructures);
            }
            if ((this.onEndGetLinkedStructuresDelegate == null)) {
                this.onEndGetLinkedStructuresDelegate = new EndOperationDelegate(this.OnEndGetLinkedStructures);
            }
            if ((this.onGetLinkedStructuresCompletedDelegate == null)) {
                this.onGetLinkedStructuresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLinkedStructuresCompleted);
            }
            base.InvokeAsync(this.onBeginGetLinkedStructuresDelegate, null, this.onEndGetLinkedStructuresDelegate, this.onGetLinkedStructuresCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureLink[] GetLinkedStructuresByID(long ID) {
            return base.Channel.GetLinkedStructuresByID(ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLinkedStructuresByID(long ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLinkedStructuresByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureLink[] EndGetLinkedStructuresByID(System.IAsyncResult result) {
            return base.Channel.EndGetLinkedStructuresByID(result);
        }
        
        private System.IAsyncResult OnBeginGetLinkedStructuresByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            return this.BeginGetLinkedStructuresByID(ID, callback, asyncState);
        }
        
        private object[] OnEndGetLinkedStructuresByID(System.IAsyncResult result) {
            AnnotationService.Types.StructureLink[] retVal = this.EndGetLinkedStructuresByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLinkedStructuresByIDCompleted(object state) {
            if ((this.GetLinkedStructuresByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLinkedStructuresByIDCompleted(this, new GetLinkedStructuresByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLinkedStructuresByIDAsync(long ID) {
            this.GetLinkedStructuresByIDAsync(ID, null);
        }
        
        public void GetLinkedStructuresByIDAsync(long ID, object userState) {
            if ((this.onBeginGetLinkedStructuresByIDDelegate == null)) {
                this.onBeginGetLinkedStructuresByIDDelegate = new BeginOperationDelegate(this.OnBeginGetLinkedStructuresByID);
            }
            if ((this.onEndGetLinkedStructuresByIDDelegate == null)) {
                this.onEndGetLinkedStructuresByIDDelegate = new EndOperationDelegate(this.OnEndGetLinkedStructuresByID);
            }
            if ((this.onGetLinkedStructuresByIDCompletedDelegate == null)) {
                this.onGetLinkedStructuresByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLinkedStructuresByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetLinkedStructuresByIDDelegate, new object[] {
                        ID}, this.onEndGetLinkedStructuresByIDDelegate, this.onGetLinkedStructuresByIDCompletedDelegate, userState);
        }
        
        public long[] GetNetworkedStructures(long[] IDs, int numHops) {
            return base.Channel.GetNetworkedStructures(IDs, numHops);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNetworkedStructures(long[] IDs, int numHops, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNetworkedStructures(IDs, numHops, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndGetNetworkedStructures(System.IAsyncResult result) {
            return base.Channel.EndGetNetworkedStructures(result);
        }
        
        private System.IAsyncResult OnBeginGetNetworkedStructures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] IDs = ((long[])(inValues[0]));
            int numHops = ((int)(inValues[1]));
            return this.BeginGetNetworkedStructures(IDs, numHops, callback, asyncState);
        }
        
        private object[] OnEndGetNetworkedStructures(System.IAsyncResult result) {
            long[] retVal = this.EndGetNetworkedStructures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNetworkedStructuresCompleted(object state) {
            if ((this.GetNetworkedStructuresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNetworkedStructuresCompleted(this, new GetNetworkedStructuresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNetworkedStructuresAsync(long[] IDs, int numHops) {
            this.GetNetworkedStructuresAsync(IDs, numHops, null);
        }
        
        public void GetNetworkedStructuresAsync(long[] IDs, int numHops, object userState) {
            if ((this.onBeginGetNetworkedStructuresDelegate == null)) {
                this.onBeginGetNetworkedStructuresDelegate = new BeginOperationDelegate(this.OnBeginGetNetworkedStructures);
            }
            if ((this.onEndGetNetworkedStructuresDelegate == null)) {
                this.onEndGetNetworkedStructuresDelegate = new EndOperationDelegate(this.OnEndGetNetworkedStructures);
            }
            if ((this.onGetNetworkedStructuresCompletedDelegate == null)) {
                this.onGetNetworkedStructuresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNetworkedStructuresCompleted);
            }
            base.InvokeAsync(this.onBeginGetNetworkedStructuresDelegate, new object[] {
                        IDs,
                        numHops}, this.onEndGetNetworkedStructuresDelegate, this.onGetNetworkedStructuresCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetChildStructuresInNetwork(long[] IDs, int numHops) {
            return base.Channel.GetChildStructuresInNetwork(IDs, numHops);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetChildStructuresInNetwork(long[] IDs, int numHops, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChildStructuresInNetwork(IDs, numHops, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetChildStructuresInNetwork(System.IAsyncResult result) {
            return base.Channel.EndGetChildStructuresInNetwork(result);
        }
        
        private System.IAsyncResult OnBeginGetChildStructuresInNetwork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] IDs = ((long[])(inValues[0]));
            int numHops = ((int)(inValues[1]));
            return this.BeginGetChildStructuresInNetwork(IDs, numHops, callback, asyncState);
        }
        
        private object[] OnEndGetChildStructuresInNetwork(System.IAsyncResult result) {
            AnnotationService.Types.Structure[] retVal = this.EndGetChildStructuresInNetwork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChildStructuresInNetworkCompleted(object state) {
            if ((this.GetChildStructuresInNetworkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChildStructuresInNetworkCompleted(this, new GetChildStructuresInNetworkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChildStructuresInNetworkAsync(long[] IDs, int numHops) {
            this.GetChildStructuresInNetworkAsync(IDs, numHops, null);
        }
        
        public void GetChildStructuresInNetworkAsync(long[] IDs, int numHops, object userState) {
            if ((this.onBeginGetChildStructuresInNetworkDelegate == null)) {
                this.onBeginGetChildStructuresInNetworkDelegate = new BeginOperationDelegate(this.OnBeginGetChildStructuresInNetwork);
            }
            if ((this.onEndGetChildStructuresInNetworkDelegate == null)) {
                this.onEndGetChildStructuresInNetworkDelegate = new EndOperationDelegate(this.OnEndGetChildStructuresInNetwork);
            }
            if ((this.onGetChildStructuresInNetworkCompletedDelegate == null)) {
                this.onGetChildStructuresInNetworkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChildStructuresInNetworkCompleted);
            }
            base.InvokeAsync(this.onBeginGetChildStructuresInNetworkDelegate, new object[] {
                        IDs,
                        numHops}, this.onEndGetChildStructuresInNetworkDelegate, this.onGetChildStructuresInNetworkCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.StructureLink[] GetStructureLinksInNetwork(long[] IDs, int numHops) {
            return base.Channel.GetStructureLinksInNetwork(IDs, numHops);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructureLinksInNetwork(long[] IDs, int numHops, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructureLinksInNetwork(IDs, numHops, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.StructureLink[] EndGetStructureLinksInNetwork(System.IAsyncResult result) {
            return base.Channel.EndGetStructureLinksInNetwork(result);
        }
        
        private System.IAsyncResult OnBeginGetStructureLinksInNetwork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] IDs = ((long[])(inValues[0]));
            int numHops = ((int)(inValues[1]));
            return this.BeginGetStructureLinksInNetwork(IDs, numHops, callback, asyncState);
        }
        
        private object[] OnEndGetStructureLinksInNetwork(System.IAsyncResult result) {
            AnnotationService.Types.StructureLink[] retVal = this.EndGetStructureLinksInNetwork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructureLinksInNetworkCompleted(object state) {
            if ((this.GetStructureLinksInNetworkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructureLinksInNetworkCompleted(this, new GetStructureLinksInNetworkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructureLinksInNetworkAsync(long[] IDs, int numHops) {
            this.GetStructureLinksInNetworkAsync(IDs, numHops, null);
        }
        
        public void GetStructureLinksInNetworkAsync(long[] IDs, int numHops, object userState) {
            if ((this.onBeginGetStructureLinksInNetworkDelegate == null)) {
                this.onBeginGetStructureLinksInNetworkDelegate = new BeginOperationDelegate(this.OnBeginGetStructureLinksInNetwork);
            }
            if ((this.onEndGetStructureLinksInNetworkDelegate == null)) {
                this.onEndGetStructureLinksInNetworkDelegate = new EndOperationDelegate(this.OnEndGetStructureLinksInNetwork);
            }
            if ((this.onGetStructureLinksInNetworkCompletedDelegate == null)) {
                this.onGetStructureLinksInNetworkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructureLinksInNetworkCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructureLinksInNetworkDelegate, new object[] {
                        IDs,
                        numHops}, this.onEndGetStructureLinksInNetworkDelegate, this.onGetStructureLinksInNetworkCompletedDelegate, userState);
        }
        
        public long NumberOfLocationsForStructure(long structureID) {
            return base.Channel.NumberOfLocationsForStructure(structureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginNumberOfLocationsForStructure(long structureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNumberOfLocationsForStructure(structureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndNumberOfLocationsForStructure(System.IAsyncResult result) {
            return base.Channel.EndNumberOfLocationsForStructure(result);
        }
        
        private System.IAsyncResult OnBeginNumberOfLocationsForStructure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long structureID = ((long)(inValues[0]));
            return this.BeginNumberOfLocationsForStructure(structureID, callback, asyncState);
        }
        
        private object[] OnEndNumberOfLocationsForStructure(System.IAsyncResult result) {
            long retVal = this.EndNumberOfLocationsForStructure(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNumberOfLocationsForStructureCompleted(object state) {
            if ((this.NumberOfLocationsForStructureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NumberOfLocationsForStructureCompleted(this, new NumberOfLocationsForStructureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NumberOfLocationsForStructureAsync(long structureID) {
            this.NumberOfLocationsForStructureAsync(structureID, null);
        }
        
        public void NumberOfLocationsForStructureAsync(long structureID, object userState) {
            if ((this.onBeginNumberOfLocationsForStructureDelegate == null)) {
                this.onBeginNumberOfLocationsForStructureDelegate = new BeginOperationDelegate(this.OnBeginNumberOfLocationsForStructure);
            }
            if ((this.onEndNumberOfLocationsForStructureDelegate == null)) {
                this.onEndNumberOfLocationsForStructureDelegate = new EndOperationDelegate(this.OnEndNumberOfLocationsForStructure);
            }
            if ((this.onNumberOfLocationsForStructureCompletedDelegate == null)) {
                this.onNumberOfLocationsForStructureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNumberOfLocationsForStructureCompleted);
            }
            base.InvokeAsync(this.onBeginNumberOfLocationsForStructureDelegate, new object[] {
                        structureID}, this.onEndNumberOfLocationsForStructureDelegate, this.onNumberOfLocationsForStructureCompletedDelegate, userState);
        }
        
        public long[] UpdateStructures(AnnotationService.Types.Structure[] structure) {
            return base.Channel.UpdateStructures(structure);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateStructures(AnnotationService.Types.Structure[] structure, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStructures(structure, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndUpdateStructures(System.IAsyncResult result) {
            return base.Channel.EndUpdateStructures(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStructures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.Structure[] structure = ((AnnotationService.Types.Structure[])(inValues[0]));
            return this.BeginUpdateStructures(structure, callback, asyncState);
        }
        
        private object[] OnEndUpdateStructures(System.IAsyncResult result) {
            long[] retVal = this.EndUpdateStructures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateStructuresCompleted(object state) {
            if ((this.UpdateStructuresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStructuresCompleted(this, new UpdateStructuresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStructuresAsync(AnnotationService.Types.Structure[] structure) {
            this.UpdateStructuresAsync(structure, null);
        }
        
        public void UpdateStructuresAsync(AnnotationService.Types.Structure[] structure, object userState) {
            if ((this.onBeginUpdateStructuresDelegate == null)) {
                this.onBeginUpdateStructuresDelegate = new BeginOperationDelegate(this.OnBeginUpdateStructures);
            }
            if ((this.onEndUpdateStructuresDelegate == null)) {
                this.onEndUpdateStructuresDelegate = new EndOperationDelegate(this.OnEndUpdateStructures);
            }
            if ((this.onUpdateStructuresCompletedDelegate == null)) {
                this.onUpdateStructuresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStructuresCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStructuresDelegate, new object[] {
                        structure}, this.onEndUpdateStructuresDelegate, this.onUpdateStructuresCompletedDelegate, userState);
        }
        
        public void UpdateStructureLinks(AnnotationService.Types.StructureLink[] structureLinks) {
            base.Channel.UpdateStructureLinks(structureLinks);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateStructureLinks(AnnotationService.Types.StructureLink[] structureLinks, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStructureLinks(structureLinks, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateStructureLinks(System.IAsyncResult result) {
            base.Channel.EndUpdateStructureLinks(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStructureLinks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.StructureLink[] structureLinks = ((AnnotationService.Types.StructureLink[])(inValues[0]));
            return this.BeginUpdateStructureLinks(structureLinks, callback, asyncState);
        }
        
        private object[] OnEndUpdateStructureLinks(System.IAsyncResult result) {
            this.EndUpdateStructureLinks(result);
            return null;
        }
        
        private void OnUpdateStructureLinksCompleted(object state) {
            if ((this.UpdateStructureLinksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStructureLinksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStructureLinksAsync(AnnotationService.Types.StructureLink[] structureLinks) {
            this.UpdateStructureLinksAsync(structureLinks, null);
        }
        
        public void UpdateStructureLinksAsync(AnnotationService.Types.StructureLink[] structureLinks, object userState) {
            if ((this.onBeginUpdateStructureLinksDelegate == null)) {
                this.onBeginUpdateStructureLinksDelegate = new BeginOperationDelegate(this.OnBeginUpdateStructureLinks);
            }
            if ((this.onEndUpdateStructureLinksDelegate == null)) {
                this.onEndUpdateStructureLinksDelegate = new EndOperationDelegate(this.OnEndUpdateStructureLinks);
            }
            if ((this.onUpdateStructureLinksCompletedDelegate == null)) {
                this.onUpdateStructureLinksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStructureLinksCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStructureLinksDelegate, new object[] {
                        structureLinks}, this.onEndUpdateStructureLinksDelegate, this.onUpdateStructureLinksCompletedDelegate, userState);
        }
        
        public long[] GetUnfinishedLocations(long structureID) {
            return base.Channel.GetUnfinishedLocations(structureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnfinishedLocations(long structureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnfinishedLocations(structureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndGetUnfinishedLocations(System.IAsyncResult result) {
            return base.Channel.EndGetUnfinishedLocations(result);
        }
        
        private System.IAsyncResult OnBeginGetUnfinishedLocations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long structureID = ((long)(inValues[0]));
            return this.BeginGetUnfinishedLocations(structureID, callback, asyncState);
        }
        
        private object[] OnEndGetUnfinishedLocations(System.IAsyncResult result) {
            long[] retVal = this.EndGetUnfinishedLocations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnfinishedLocationsCompleted(object state) {
            if ((this.GetUnfinishedLocationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnfinishedLocationsCompleted(this, new GetUnfinishedLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnfinishedLocationsAsync(long structureID) {
            this.GetUnfinishedLocationsAsync(structureID, null);
        }
        
        public void GetUnfinishedLocationsAsync(long structureID, object userState) {
            if ((this.onBeginGetUnfinishedLocationsDelegate == null)) {
                this.onBeginGetUnfinishedLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetUnfinishedLocations);
            }
            if ((this.onEndGetUnfinishedLocationsDelegate == null)) {
                this.onEndGetUnfinishedLocationsDelegate = new EndOperationDelegate(this.OnEndGetUnfinishedLocations);
            }
            if ((this.onGetUnfinishedLocationsCompletedDelegate == null)) {
                this.onGetUnfinishedLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnfinishedLocationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnfinishedLocationsDelegate, new object[] {
                        structureID}, this.onEndGetUnfinishedLocationsDelegate, this.onGetUnfinishedLocationsCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.LocationPositionOnly[] GetUnfinishedLocationsWithPosition(long structureID) {
            return base.Channel.GetUnfinishedLocationsWithPosition(structureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnfinishedLocationsWithPosition(long structureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnfinishedLocationsWithPosition(structureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.LocationPositionOnly[] EndGetUnfinishedLocationsWithPosition(System.IAsyncResult result) {
            return base.Channel.EndGetUnfinishedLocationsWithPosition(result);
        }
        
        private System.IAsyncResult OnBeginGetUnfinishedLocationsWithPosition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long structureID = ((long)(inValues[0]));
            return this.BeginGetUnfinishedLocationsWithPosition(structureID, callback, asyncState);
        }
        
        private object[] OnEndGetUnfinishedLocationsWithPosition(System.IAsyncResult result) {
            AnnotationService.Types.LocationPositionOnly[] retVal = this.EndGetUnfinishedLocationsWithPosition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnfinishedLocationsWithPositionCompleted(object state) {
            if ((this.GetUnfinishedLocationsWithPositionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnfinishedLocationsWithPositionCompleted(this, new GetUnfinishedLocationsWithPositionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnfinishedLocationsWithPositionAsync(long structureID) {
            this.GetUnfinishedLocationsWithPositionAsync(structureID, null);
        }
        
        public void GetUnfinishedLocationsWithPositionAsync(long structureID, object userState) {
            if ((this.onBeginGetUnfinishedLocationsWithPositionDelegate == null)) {
                this.onBeginGetUnfinishedLocationsWithPositionDelegate = new BeginOperationDelegate(this.OnBeginGetUnfinishedLocationsWithPosition);
            }
            if ((this.onEndGetUnfinishedLocationsWithPositionDelegate == null)) {
                this.onEndGetUnfinishedLocationsWithPositionDelegate = new EndOperationDelegate(this.OnEndGetUnfinishedLocationsWithPosition);
            }
            if ((this.onGetUnfinishedLocationsWithPositionCompletedDelegate == null)) {
                this.onGetUnfinishedLocationsWithPositionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnfinishedLocationsWithPositionCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnfinishedLocationsWithPositionDelegate, new object[] {
                        structureID}, this.onEndGetUnfinishedLocationsWithPositionDelegate, this.onGetUnfinishedLocationsWithPositionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructuresOfType(long typeID) {
            return base.Channel.GetStructuresOfType(typeID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructuresOfType(long typeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructuresOfType(typeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructuresOfType(System.IAsyncResult result) {
            return base.Channel.EndGetStructuresOfType(result);
        }
        
        private System.IAsyncResult OnBeginGetStructuresOfType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long typeID = ((long)(inValues[0]));
            return this.BeginGetStructuresOfType(typeID, callback, asyncState);
        }
        
        private object[] OnEndGetStructuresOfType(System.IAsyncResult result) {
            AnnotationService.Types.Structure[] retVal = this.EndGetStructuresOfType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructuresOfTypeCompleted(object state) {
            if ((this.GetStructuresOfTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructuresOfTypeCompleted(this, new GetStructuresOfTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructuresOfTypeAsync(long typeID) {
            this.GetStructuresOfTypeAsync(typeID, null);
        }
        
        public void GetStructuresOfTypeAsync(long typeID, object userState) {
            if ((this.onBeginGetStructuresOfTypeDelegate == null)) {
                this.onBeginGetStructuresOfTypeDelegate = new BeginOperationDelegate(this.OnBeginGetStructuresOfType);
            }
            if ((this.onEndGetStructuresOfTypeDelegate == null)) {
                this.onEndGetStructuresOfTypeDelegate = new EndOperationDelegate(this.OnEndGetStructuresOfType);
            }
            if ((this.onGetStructuresOfTypeCompletedDelegate == null)) {
                this.onGetStructuresOfTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructuresOfTypeCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructuresOfTypeDelegate, new object[] {
                        typeID}, this.onEndGetStructuresOfTypeDelegate, this.onGetStructuresOfTypeCompletedDelegate, userState);
        }
        
        public long Merge(long KeepID, long MergeID) {
            return base.Channel.Merge(KeepID, MergeID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMerge(long KeepID, long MergeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMerge(KeepID, MergeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndMerge(System.IAsyncResult result) {
            return base.Channel.EndMerge(result);
        }
        
        private System.IAsyncResult OnBeginMerge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long KeepID = ((long)(inValues[0]));
            long MergeID = ((long)(inValues[1]));
            return this.BeginMerge(KeepID, MergeID, callback, asyncState);
        }
        
        private object[] OnEndMerge(System.IAsyncResult result) {
            long retVal = this.EndMerge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMergeCompleted(object state) {
            if ((this.MergeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MergeCompleted(this, new MergeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MergeAsync(long KeepID, long MergeID) {
            this.MergeAsync(KeepID, MergeID, null);
        }
        
        public void MergeAsync(long KeepID, long MergeID, object userState) {
            if ((this.onBeginMergeDelegate == null)) {
                this.onBeginMergeDelegate = new BeginOperationDelegate(this.OnBeginMerge);
            }
            if ((this.onEndMergeDelegate == null)) {
                this.onEndMergeDelegate = new EndOperationDelegate(this.OnEndMerge);
            }
            if ((this.onMergeCompletedDelegate == null)) {
                this.onMergeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMergeCompleted);
            }
            base.InvokeAsync(this.onBeginMergeDelegate, new object[] {
                        KeepID,
                        MergeID}, this.onEndMergeDelegate, this.onMergeCompletedDelegate, userState);
        }
        
        public long Split(long StructureA, long LocationIDInSplitStructure) {
            return base.Channel.Split(StructureA, LocationIDInSplitStructure);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplit(long StructureA, long LocationIDInSplitStructure, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplit(StructureA, LocationIDInSplitStructure, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndSplit(System.IAsyncResult result) {
            return base.Channel.EndSplit(result);
        }
        
        private System.IAsyncResult OnBeginSplit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long StructureA = ((long)(inValues[0]));
            long LocationIDInSplitStructure = ((long)(inValues[1]));
            return this.BeginSplit(StructureA, LocationIDInSplitStructure, callback, asyncState);
        }
        
        private object[] OnEndSplit(System.IAsyncResult result) {
            long retVal = this.EndSplit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitCompleted(object state) {
            if ((this.SplitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitCompleted(this, new SplitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitAsync(long StructureA, long LocationIDInSplitStructure) {
            this.SplitAsync(StructureA, LocationIDInSplitStructure, null);
        }
        
        public void SplitAsync(long StructureA, long LocationIDInSplitStructure, object userState) {
            if ((this.onBeginSplitDelegate == null)) {
                this.onBeginSplitDelegate = new BeginOperationDelegate(this.OnBeginSplit);
            }
            if ((this.onEndSplitDelegate == null)) {
                this.onEndSplitDelegate = new EndOperationDelegate(this.OnEndSplit);
            }
            if ((this.onSplitCompletedDelegate == null)) {
                this.onSplitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitCompleted);
            }
            base.InvokeAsync(this.onBeginSplitDelegate, new object[] {
                        StructureA,
                        LocationIDInSplitStructure}, this.onEndSplitDelegate, this.onSplitCompletedDelegate, userState);
        }
        
        public long SplitAtLocationLink(long LocationIDOfKeepStructure, long LocationIDOfSplitStructure) {
            return base.Channel.SplitAtLocationLink(LocationIDOfKeepStructure, LocationIDOfSplitStructure);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSplitAtLocationLink(long LocationIDOfKeepStructure, long LocationIDOfSplitStructure, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSplitAtLocationLink(LocationIDOfKeepStructure, LocationIDOfSplitStructure, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndSplitAtLocationLink(System.IAsyncResult result) {
            return base.Channel.EndSplitAtLocationLink(result);
        }
        
        private System.IAsyncResult OnBeginSplitAtLocationLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long LocationIDOfKeepStructure = ((long)(inValues[0]));
            long LocationIDOfSplitStructure = ((long)(inValues[1]));
            return this.BeginSplitAtLocationLink(LocationIDOfKeepStructure, LocationIDOfSplitStructure, callback, asyncState);
        }
        
        private object[] OnEndSplitAtLocationLink(System.IAsyncResult result) {
            long retVal = this.EndSplitAtLocationLink(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSplitAtLocationLinkCompleted(object state) {
            if ((this.SplitAtLocationLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SplitAtLocationLinkCompleted(this, new SplitAtLocationLinkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SplitAtLocationLinkAsync(long LocationIDOfKeepStructure, long LocationIDOfSplitStructure) {
            this.SplitAtLocationLinkAsync(LocationIDOfKeepStructure, LocationIDOfSplitStructure, null);
        }
        
        public void SplitAtLocationLinkAsync(long LocationIDOfKeepStructure, long LocationIDOfSplitStructure, object userState) {
            if ((this.onBeginSplitAtLocationLinkDelegate == null)) {
                this.onBeginSplitAtLocationLinkDelegate = new BeginOperationDelegate(this.OnBeginSplitAtLocationLink);
            }
            if ((this.onEndSplitAtLocationLinkDelegate == null)) {
                this.onEndSplitAtLocationLinkDelegate = new EndOperationDelegate(this.OnEndSplitAtLocationLink);
            }
            if ((this.onSplitAtLocationLinkCompletedDelegate == null)) {
                this.onSplitAtLocationLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSplitAtLocationLinkCompleted);
            }
            base.InvokeAsync(this.onBeginSplitAtLocationLinkDelegate, new object[] {
                        LocationIDOfKeepStructure,
                        LocationIDOfSplitStructure}, this.onEndSplitAtLocationLinkDelegate, this.onSplitAtLocationLinkCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Structure[] GetStructureChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time) {
            return base.Channel.GetStructureChangeLog(structure_id, begin_time, end_time);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStructureChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStructureChangeLog(structure_id, begin_time, end_time, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Structure[] EndGetStructureChangeLog(System.IAsyncResult result) {
            return base.Channel.EndGetStructureChangeLog(result);
        }
        
        private System.IAsyncResult OnBeginGetStructureChangeLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<long> structure_id = ((System.Nullable<long>)(inValues[0]));
            System.Nullable<System.DateTime> begin_time = ((System.Nullable<System.DateTime>)(inValues[1]));
            System.Nullable<System.DateTime> end_time = ((System.Nullable<System.DateTime>)(inValues[2]));
            return this.BeginGetStructureChangeLog(structure_id, begin_time, end_time, callback, asyncState);
        }
        
        private object[] OnEndGetStructureChangeLog(System.IAsyncResult result) {
            AnnotationService.Types.Structure[] retVal = this.EndGetStructureChangeLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStructureChangeLogCompleted(object state) {
            if ((this.GetStructureChangeLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStructureChangeLogCompleted(this, new GetStructureChangeLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStructureChangeLogAsync(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time) {
            this.GetStructureChangeLogAsync(structure_id, begin_time, end_time, null);
        }
        
        public void GetStructureChangeLogAsync(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time, object userState) {
            if ((this.onBeginGetStructureChangeLogDelegate == null)) {
                this.onBeginGetStructureChangeLogDelegate = new BeginOperationDelegate(this.OnBeginGetStructureChangeLog);
            }
            if ((this.onEndGetStructureChangeLogDelegate == null)) {
                this.onEndGetStructureChangeLogDelegate = new EndOperationDelegate(this.OnEndGetStructureChangeLog);
            }
            if ((this.onGetStructureChangeLogCompletedDelegate == null)) {
                this.onGetStructureChangeLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStructureChangeLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetStructureChangeLogDelegate, new object[] {
                        structure_id,
                        begin_time,
                        end_time}, this.onEndGetStructureChangeLogDelegate, this.onGetStructureChangeLogCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IAnnotateLocations")]
    public interface IAnnotateLocations {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/CreateLocation", ReplyAction="http://tempuri.org/IAnnotateLocations/CreateLocationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AnnotationService.Types.LocationHistory))]
        AnnotationService.Types.Location CreateLocation(AnnotationService.Types.Location obj, long[] LinkedIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/CreateLocation", ReplyAction="http://tempuri.org/IAnnotateLocations/CreateLocationResponse")]
        System.IAsyncResult BeginCreateLocation(AnnotationService.Types.Location obj, long[] LinkedIDs, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location EndCreateLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationByID", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationByIDResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AnnotationService.Types.LocationHistory))]
        AnnotationService.Types.Location GetLocationByID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationByID", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationByIDResponse")]
        System.IAsyncResult BeginGetLocationByID(long ID, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location EndGetLocationByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationsByID", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsByIDResponse")]
        AnnotationService.Types.Location[] GetLocationsByID(long[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationsByID", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsByIDResponse")]
        System.IAsyncResult BeginGetLocationsByID(long[] IDs, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location[] EndGetLocationsByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLastModifiedLocation", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLastModifiedLocationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AnnotationService.Types.LocationHistory))]
        AnnotationService.Types.Location GetLastModifiedLocation();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLastModifiedLocation", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLastModifiedLocationResponse")]
        System.IAsyncResult BeginGetLastModifiedLocation(System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location EndGetLastModifiedLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLinkedLocations", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLinkedLocationsResponse")]
        long[] GetLinkedLocations(long ID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLinkedLocations", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLinkedLocationsResponse")]
        System.IAsyncResult BeginGetLinkedLocations(long ID, System.AsyncCallback callback, object asyncState);
        
        long[] EndGetLinkedLocations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationsForSection", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsForSectionResponse")]
        AnnotationService.Types.Location[] GetLocationsForSection(out long QueryExecutedTime, long section);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationsForSection", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsForSectionResponse")]
        System.IAsyncResult BeginGetLocationsForSection(long section, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location[] EndGetLocationsForSection(out long QueryExecutedTime, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationsForStructure", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsForStructureResponse")]
        AnnotationService.Types.Location[] GetLocationsForStructure(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationsForStructure", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsForStructureResponse")]
        System.IAsyncResult BeginGetLocationsForStructure(long structureID, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location[] EndGetLocationsForStructure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationChangesInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangesInMosaicRegionResponse")]
        AnnotationService.Types.Location[] GetLocationChangesInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationChangesInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangesInMosaicRegionResponse")]
        System.IAsyncResult BeginGetLocationChangesInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location[] EndGetLocationChangesInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetAnnotationsInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateLocations/GetAnnotationsInMosaicRegionResponse")]
        AnnotationService.Types.AnnotationSet GetAnnotationsInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetAnnotationsInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateLocations/GetAnnotationsInMosaicRegionResponse")]
        System.IAsyncResult BeginGetAnnotationsInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.AnnotationSet EndGetAnnotationsInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationChanges", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangesResponse")]
        AnnotationService.Types.Location[] GetLocationChanges(out long QueryExecutedTime, out long[] DeletedIDs, long section, long ModifiedAfterThisUtcTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationChanges", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangesResponse")]
        System.IAsyncResult BeginGetLocationChanges(long section, long ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Location[] EndGetLocationChanges(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/Update", ReplyAction="http://tempuri.org/IAnnotateLocations/UpdateResponse")]
        long[] Update(AnnotationService.Types.Location[] locations);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/Update", ReplyAction="http://tempuri.org/IAnnotateLocations/UpdateResponse")]
        System.IAsyncResult BeginUpdate(AnnotationService.Types.Location[] locations, System.AsyncCallback callback, object asyncState);
        
        long[] EndUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/CreateLocationLink", ReplyAction="http://tempuri.org/IAnnotateLocations/CreateLocationLinkResponse")]
        void CreateLocationLink(long SourceID, long TargetID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/CreateLocationLink", ReplyAction="http://tempuri.org/IAnnotateLocations/CreateLocationLinkResponse")]
        System.IAsyncResult BeginCreateLocationLink(long SourceID, long TargetID, System.AsyncCallback callback, object asyncState);
        
        void EndCreateLocationLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/DeleteLocationLink", ReplyAction="http://tempuri.org/IAnnotateLocations/DeleteLocationLinkResponse")]
        void DeleteLocationLink(long SourceID, long TargetID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/DeleteLocationLink", ReplyAction="http://tempuri.org/IAnnotateLocations/DeleteLocationLinkResponse")]
        System.IAsyncResult BeginDeleteLocationLink(long SourceID, long TargetID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLocationLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSection", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSectionResponse")]
        AnnotationService.Types.LocationLink[] GetLocationLinksForSection(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, long section, long ModifiedAfterThisTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSection", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSectionResponse")]
        System.IAsyncResult BeginGetLocationLinksForSection(long section, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.LocationLink[] EndGetLocationLinksForSection(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSectionInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSectionInMosaicRegionRes" +
            "ponse")]
        AnnotationService.Types.LocationLink[] GetLocationLinksForSectionInMosaicRegion(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisUtcTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSectionInMosaicRegion", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationLinksForSectionInMosaicRegionRes" +
            "ponse")]
        System.IAsyncResult BeginGetLocationLinksForSectionInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.LocationLink[] EndGetLocationLinksForSectionInMosaicRegion(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationChangeLog", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangeLogResponse")]
        AnnotationService.Types.LocationHistory[] GetLocationChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAnnotateLocations/GetLocationChangeLog", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangeLogResponse")]
        System.IAsyncResult BeginGetLocationChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time, System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.LocationHistory[] EndGetLocationChangeLog(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnnotateLocationsChannel : WebAnnotationModel.Service.IAnnotateLocations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Location Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Location Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Location[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastModifiedLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastModifiedLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Location Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLinkedLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLinkedLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationsForSectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationsForSectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public AnnotationService.Types.Location[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationsForStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationsForStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Location[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationChangesInMosaicRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationChangesInMosaicRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long[] DeletedIDs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.Location[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAnnotationsInMosaicRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAnnotationsInMosaicRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long[] DeletedIDs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.AnnotationSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.AnnotationSet)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long[] DeletedIDs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.Location[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Location[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationLinksForSectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationLinksForSectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public AnnotationService.Types.LocationLink[] DeletedLinks {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.LocationLink[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.LocationLink[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.LocationLink[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationLinksForSectionInMosaicRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationLinksForSectionInMosaicRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long QueryExecutedTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public AnnotationService.Types.LocationLink[] DeletedLinks {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.LocationLink[])(this.results[1]));
            }
        }
        
        public AnnotationService.Types.LocationLink[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.LocationLink[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationChangeLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationChangeLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.LocationHistory[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.LocationHistory[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotateLocationsClient : System.ServiceModel.ClientBase<WebAnnotationModel.Service.IAnnotateLocations>, WebAnnotationModel.Service.IAnnotateLocations {
        
        private BeginOperationDelegate onBeginCreateLocationDelegate;
        
        private EndOperationDelegate onEndCreateLocationDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationByIDDelegate;
        
        private EndOperationDelegate onEndGetLocationByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationsByIDDelegate;
        
        private EndOperationDelegate onEndGetLocationsByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationsByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastModifiedLocationDelegate;
        
        private EndOperationDelegate onEndGetLastModifiedLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastModifiedLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLinkedLocationsDelegate;
        
        private EndOperationDelegate onEndGetLinkedLocationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLinkedLocationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationsForSectionDelegate;
        
        private EndOperationDelegate onEndGetLocationsForSectionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationsForSectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationsForStructureDelegate;
        
        private EndOperationDelegate onEndGetLocationsForStructureDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationsForStructureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationChangesInMosaicRegionDelegate;
        
        private EndOperationDelegate onEndGetLocationChangesInMosaicRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationChangesInMosaicRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAnnotationsInMosaicRegionDelegate;
        
        private EndOperationDelegate onEndGetAnnotationsInMosaicRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetAnnotationsInMosaicRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationChangesDelegate;
        
        private EndOperationDelegate onEndGetLocationChangesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationChangesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateLocationLinkDelegate;
        
        private EndOperationDelegate onEndCreateLocationLinkDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLocationLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLocationLinkDelegate;
        
        private EndOperationDelegate onEndDeleteLocationLinkDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLocationLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationLinksForSectionDelegate;
        
        private EndOperationDelegate onEndGetLocationLinksForSectionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationLinksForSectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationLinksForSectionInMosaicRegionDelegate;
        
        private EndOperationDelegate onEndGetLocationLinksForSectionInMosaicRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationLinksForSectionInMosaicRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationChangeLogDelegate;
        
        private EndOperationDelegate onEndGetLocationChangeLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationChangeLogCompletedDelegate;
        
        public AnnotateLocationsClient() {
        }
        
        public AnnotateLocationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotateLocationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateLocationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateLocationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CreateLocationCompletedEventArgs> CreateLocationCompleted;
        
        public event System.EventHandler<GetLocationByIDCompletedEventArgs> GetLocationByIDCompleted;
        
        public event System.EventHandler<GetLocationsByIDCompletedEventArgs> GetLocationsByIDCompleted;
        
        public event System.EventHandler<GetLastModifiedLocationCompletedEventArgs> GetLastModifiedLocationCompleted;
        
        public event System.EventHandler<GetLinkedLocationsCompletedEventArgs> GetLinkedLocationsCompleted;
        
        public event System.EventHandler<GetLocationsForSectionCompletedEventArgs> GetLocationsForSectionCompleted;
        
        public event System.EventHandler<GetLocationsForStructureCompletedEventArgs> GetLocationsForStructureCompleted;
        
        public event System.EventHandler<GetLocationChangesInMosaicRegionCompletedEventArgs> GetLocationChangesInMosaicRegionCompleted;
        
        public event System.EventHandler<GetAnnotationsInMosaicRegionCompletedEventArgs> GetAnnotationsInMosaicRegionCompleted;
        
        public event System.EventHandler<GetLocationChangesCompletedEventArgs> GetLocationChangesCompleted;
        
        public event System.EventHandler<UpdateCompletedEventArgs> UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateLocationLinkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteLocationLinkCompleted;
        
        public event System.EventHandler<GetLocationLinksForSectionCompletedEventArgs> GetLocationLinksForSectionCompleted;
        
        public event System.EventHandler<GetLocationLinksForSectionInMosaicRegionCompletedEventArgs> GetLocationLinksForSectionInMosaicRegionCompleted;
        
        public event System.EventHandler<GetLocationChangeLogCompletedEventArgs> GetLocationChangeLogCompleted;
        
        public AnnotationService.Types.Location CreateLocation(AnnotationService.Types.Location obj, long[] LinkedIDs) {
            return base.Channel.CreateLocation(obj, LinkedIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateLocation(AnnotationService.Types.Location obj, long[] LinkedIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLocation(obj, LinkedIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location EndCreateLocation(System.IAsyncResult result) {
            return base.Channel.EndCreateLocation(result);
        }
        
        private System.IAsyncResult OnBeginCreateLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.Location obj = ((AnnotationService.Types.Location)(inValues[0]));
            long[] LinkedIDs = ((long[])(inValues[1]));
            return this.BeginCreateLocation(obj, LinkedIDs, callback, asyncState);
        }
        
        private object[] OnEndCreateLocation(System.IAsyncResult result) {
            AnnotationService.Types.Location retVal = this.EndCreateLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateLocationCompleted(object state) {
            if ((this.CreateLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLocationCompleted(this, new CreateLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLocationAsync(AnnotationService.Types.Location obj, long[] LinkedIDs) {
            this.CreateLocationAsync(obj, LinkedIDs, null);
        }
        
        public void CreateLocationAsync(AnnotationService.Types.Location obj, long[] LinkedIDs, object userState) {
            if ((this.onBeginCreateLocationDelegate == null)) {
                this.onBeginCreateLocationDelegate = new BeginOperationDelegate(this.OnBeginCreateLocation);
            }
            if ((this.onEndCreateLocationDelegate == null)) {
                this.onEndCreateLocationDelegate = new EndOperationDelegate(this.OnEndCreateLocation);
            }
            if ((this.onCreateLocationCompletedDelegate == null)) {
                this.onCreateLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLocationCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLocationDelegate, new object[] {
                        obj,
                        LinkedIDs}, this.onEndCreateLocationDelegate, this.onCreateLocationCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location GetLocationByID(long ID) {
            return base.Channel.GetLocationByID(ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationByID(long ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location EndGetLocationByID(System.IAsyncResult result) {
            return base.Channel.EndGetLocationByID(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            return this.BeginGetLocationByID(ID, callback, asyncState);
        }
        
        private object[] OnEndGetLocationByID(System.IAsyncResult result) {
            AnnotationService.Types.Location retVal = this.EndGetLocationByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationByIDCompleted(object state) {
            if ((this.GetLocationByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationByIDCompleted(this, new GetLocationByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationByIDAsync(long ID) {
            this.GetLocationByIDAsync(ID, null);
        }
        
        public void GetLocationByIDAsync(long ID, object userState) {
            if ((this.onBeginGetLocationByIDDelegate == null)) {
                this.onBeginGetLocationByIDDelegate = new BeginOperationDelegate(this.OnBeginGetLocationByID);
            }
            if ((this.onEndGetLocationByIDDelegate == null)) {
                this.onEndGetLocationByIDDelegate = new EndOperationDelegate(this.OnEndGetLocationByID);
            }
            if ((this.onGetLocationByIDCompletedDelegate == null)) {
                this.onGetLocationByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationByIDDelegate, new object[] {
                        ID}, this.onEndGetLocationByIDDelegate, this.onGetLocationByIDCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location[] GetLocationsByID(long[] IDs) {
            return base.Channel.GetLocationsByID(IDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationsByID(long[] IDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationsByID(IDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location[] EndGetLocationsByID(System.IAsyncResult result) {
            return base.Channel.EndGetLocationsByID(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationsByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] IDs = ((long[])(inValues[0]));
            return this.BeginGetLocationsByID(IDs, callback, asyncState);
        }
        
        private object[] OnEndGetLocationsByID(System.IAsyncResult result) {
            AnnotationService.Types.Location[] retVal = this.EndGetLocationsByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationsByIDCompleted(object state) {
            if ((this.GetLocationsByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationsByIDCompleted(this, new GetLocationsByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationsByIDAsync(long[] IDs) {
            this.GetLocationsByIDAsync(IDs, null);
        }
        
        public void GetLocationsByIDAsync(long[] IDs, object userState) {
            if ((this.onBeginGetLocationsByIDDelegate == null)) {
                this.onBeginGetLocationsByIDDelegate = new BeginOperationDelegate(this.OnBeginGetLocationsByID);
            }
            if ((this.onEndGetLocationsByIDDelegate == null)) {
                this.onEndGetLocationsByIDDelegate = new EndOperationDelegate(this.OnEndGetLocationsByID);
            }
            if ((this.onGetLocationsByIDCompletedDelegate == null)) {
                this.onGetLocationsByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationsByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationsByIDDelegate, new object[] {
                        IDs}, this.onEndGetLocationsByIDDelegate, this.onGetLocationsByIDCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location GetLastModifiedLocation() {
            return base.Channel.GetLastModifiedLocation();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLastModifiedLocation(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastModifiedLocation(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location EndGetLastModifiedLocation(System.IAsyncResult result) {
            return base.Channel.EndGetLastModifiedLocation(result);
        }
        
        private System.IAsyncResult OnBeginGetLastModifiedLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLastModifiedLocation(callback, asyncState);
        }
        
        private object[] OnEndGetLastModifiedLocation(System.IAsyncResult result) {
            AnnotationService.Types.Location retVal = this.EndGetLastModifiedLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastModifiedLocationCompleted(object state) {
            if ((this.GetLastModifiedLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastModifiedLocationCompleted(this, new GetLastModifiedLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastModifiedLocationAsync() {
            this.GetLastModifiedLocationAsync(null);
        }
        
        public void GetLastModifiedLocationAsync(object userState) {
            if ((this.onBeginGetLastModifiedLocationDelegate == null)) {
                this.onBeginGetLastModifiedLocationDelegate = new BeginOperationDelegate(this.OnBeginGetLastModifiedLocation);
            }
            if ((this.onEndGetLastModifiedLocationDelegate == null)) {
                this.onEndGetLastModifiedLocationDelegate = new EndOperationDelegate(this.OnEndGetLastModifiedLocation);
            }
            if ((this.onGetLastModifiedLocationCompletedDelegate == null)) {
                this.onGetLastModifiedLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastModifiedLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastModifiedLocationDelegate, null, this.onEndGetLastModifiedLocationDelegate, this.onGetLastModifiedLocationCompletedDelegate, userState);
        }
        
        public long[] GetLinkedLocations(long ID) {
            return base.Channel.GetLinkedLocations(ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLinkedLocations(long ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLinkedLocations(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndGetLinkedLocations(System.IAsyncResult result) {
            return base.Channel.EndGetLinkedLocations(result);
        }
        
        private System.IAsyncResult OnBeginGetLinkedLocations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            return this.BeginGetLinkedLocations(ID, callback, asyncState);
        }
        
        private object[] OnEndGetLinkedLocations(System.IAsyncResult result) {
            long[] retVal = this.EndGetLinkedLocations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLinkedLocationsCompleted(object state) {
            if ((this.GetLinkedLocationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLinkedLocationsCompleted(this, new GetLinkedLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLinkedLocationsAsync(long ID) {
            this.GetLinkedLocationsAsync(ID, null);
        }
        
        public void GetLinkedLocationsAsync(long ID, object userState) {
            if ((this.onBeginGetLinkedLocationsDelegate == null)) {
                this.onBeginGetLinkedLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetLinkedLocations);
            }
            if ((this.onEndGetLinkedLocationsDelegate == null)) {
                this.onEndGetLinkedLocationsDelegate = new EndOperationDelegate(this.OnEndGetLinkedLocations);
            }
            if ((this.onGetLinkedLocationsCompletedDelegate == null)) {
                this.onGetLinkedLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLinkedLocationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLinkedLocationsDelegate, new object[] {
                        ID}, this.onEndGetLinkedLocationsDelegate, this.onGetLinkedLocationsCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location[] GetLocationsForSection(out long QueryExecutedTime, long section) {
            return base.Channel.GetLocationsForSection(out QueryExecutedTime, section);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationsForSection(long section, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationsForSection(section, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location[] EndGetLocationsForSection(out long QueryExecutedTime, System.IAsyncResult result) {
            return base.Channel.EndGetLocationsForSection(out QueryExecutedTime, result);
        }
        
        private System.IAsyncResult OnBeginGetLocationsForSection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            return this.BeginGetLocationsForSection(section, callback, asyncState);
        }
        
        private object[] OnEndGetLocationsForSection(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            AnnotationService.Types.Location[] retVal = this.EndGetLocationsForSection(out QueryExecutedTime, result);
            return new object[] {
                    QueryExecutedTime,
                    retVal};
        }
        
        private void OnGetLocationsForSectionCompleted(object state) {
            if ((this.GetLocationsForSectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationsForSectionCompleted(this, new GetLocationsForSectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationsForSectionAsync(long section) {
            this.GetLocationsForSectionAsync(section, null);
        }
        
        public void GetLocationsForSectionAsync(long section, object userState) {
            if ((this.onBeginGetLocationsForSectionDelegate == null)) {
                this.onBeginGetLocationsForSectionDelegate = new BeginOperationDelegate(this.OnBeginGetLocationsForSection);
            }
            if ((this.onEndGetLocationsForSectionDelegate == null)) {
                this.onEndGetLocationsForSectionDelegate = new EndOperationDelegate(this.OnEndGetLocationsForSection);
            }
            if ((this.onGetLocationsForSectionCompletedDelegate == null)) {
                this.onGetLocationsForSectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationsForSectionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationsForSectionDelegate, new object[] {
                        section}, this.onEndGetLocationsForSectionDelegate, this.onGetLocationsForSectionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location[] GetLocationsForStructure(long structureID) {
            return base.Channel.GetLocationsForStructure(structureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationsForStructure(long structureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationsForStructure(structureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location[] EndGetLocationsForStructure(System.IAsyncResult result) {
            return base.Channel.EndGetLocationsForStructure(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationsForStructure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long structureID = ((long)(inValues[0]));
            return this.BeginGetLocationsForStructure(structureID, callback, asyncState);
        }
        
        private object[] OnEndGetLocationsForStructure(System.IAsyncResult result) {
            AnnotationService.Types.Location[] retVal = this.EndGetLocationsForStructure(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationsForStructureCompleted(object state) {
            if ((this.GetLocationsForStructureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationsForStructureCompleted(this, new GetLocationsForStructureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationsForStructureAsync(long structureID) {
            this.GetLocationsForStructureAsync(structureID, null);
        }
        
        public void GetLocationsForStructureAsync(long structureID, object userState) {
            if ((this.onBeginGetLocationsForStructureDelegate == null)) {
                this.onBeginGetLocationsForStructureDelegate = new BeginOperationDelegate(this.OnBeginGetLocationsForStructure);
            }
            if ((this.onEndGetLocationsForStructureDelegate == null)) {
                this.onEndGetLocationsForStructureDelegate = new EndOperationDelegate(this.OnEndGetLocationsForStructure);
            }
            if ((this.onGetLocationsForStructureCompletedDelegate == null)) {
                this.onGetLocationsForStructureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationsForStructureCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationsForStructureDelegate, new object[] {
                        structureID}, this.onEndGetLocationsForStructureDelegate, this.onGetLocationsForStructureCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location[] GetLocationChangesInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime) {
            return base.Channel.GetLocationChangesInMosaicRegion(out QueryExecutedTime, out DeletedIDs, section, bbox, MinRadius, ModifiedAfterThisUtcTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationChangesInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationChangesInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location[] EndGetLocationChangesInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result) {
            return base.Channel.EndGetLocationChangesInMosaicRegion(out QueryExecutedTime, out DeletedIDs, result);
        }
        
        private System.IAsyncResult OnBeginGetLocationChangesInMosaicRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            AnnotationService.Types.BoundingRectangle bbox = ((AnnotationService.Types.BoundingRectangle)(inValues[1]));
            double MinRadius = ((double)(inValues[2]));
            System.Nullable<long> ModifiedAfterThisUtcTime = ((System.Nullable<long>)(inValues[3]));
            return this.BeginGetLocationChangesInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        private object[] OnEndGetLocationChangesInMosaicRegion(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            long[] DeletedIDs = this.GetDefaultValueForInitialization<long[]>();
            AnnotationService.Types.Location[] retVal = this.EndGetLocationChangesInMosaicRegion(out QueryExecutedTime, out DeletedIDs, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedIDs,
                    retVal};
        }
        
        private void OnGetLocationChangesInMosaicRegionCompleted(object state) {
            if ((this.GetLocationChangesInMosaicRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationChangesInMosaicRegionCompleted(this, new GetLocationChangesInMosaicRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationChangesInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime) {
            this.GetLocationChangesInMosaicRegionAsync(section, bbox, MinRadius, ModifiedAfterThisUtcTime, null);
        }
        
        public void GetLocationChangesInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime, object userState) {
            if ((this.onBeginGetLocationChangesInMosaicRegionDelegate == null)) {
                this.onBeginGetLocationChangesInMosaicRegionDelegate = new BeginOperationDelegate(this.OnBeginGetLocationChangesInMosaicRegion);
            }
            if ((this.onEndGetLocationChangesInMosaicRegionDelegate == null)) {
                this.onEndGetLocationChangesInMosaicRegionDelegate = new EndOperationDelegate(this.OnEndGetLocationChangesInMosaicRegion);
            }
            if ((this.onGetLocationChangesInMosaicRegionCompletedDelegate == null)) {
                this.onGetLocationChangesInMosaicRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationChangesInMosaicRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationChangesInMosaicRegionDelegate, new object[] {
                        section,
                        bbox,
                        MinRadius,
                        ModifiedAfterThisUtcTime}, this.onEndGetLocationChangesInMosaicRegionDelegate, this.onGetLocationChangesInMosaicRegionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.AnnotationSet GetAnnotationsInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime) {
            return base.Channel.GetAnnotationsInMosaicRegion(out QueryExecutedTime, out DeletedIDs, section, bbox, MinRadius, ModifiedAfterThisUtcTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAnnotationsInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAnnotationsInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.AnnotationSet EndGetAnnotationsInMosaicRegion(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result) {
            return base.Channel.EndGetAnnotationsInMosaicRegion(out QueryExecutedTime, out DeletedIDs, result);
        }
        
        private System.IAsyncResult OnBeginGetAnnotationsInMosaicRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            AnnotationService.Types.BoundingRectangle bbox = ((AnnotationService.Types.BoundingRectangle)(inValues[1]));
            double MinRadius = ((double)(inValues[2]));
            System.Nullable<long> ModifiedAfterThisUtcTime = ((System.Nullable<long>)(inValues[3]));
            return this.BeginGetAnnotationsInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        private object[] OnEndGetAnnotationsInMosaicRegion(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            long[] DeletedIDs = this.GetDefaultValueForInitialization<long[]>();
            AnnotationService.Types.AnnotationSet retVal = this.EndGetAnnotationsInMosaicRegion(out QueryExecutedTime, out DeletedIDs, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedIDs,
                    retVal};
        }
        
        private void OnGetAnnotationsInMosaicRegionCompleted(object state) {
            if ((this.GetAnnotationsInMosaicRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAnnotationsInMosaicRegionCompleted(this, new GetAnnotationsInMosaicRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAnnotationsInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime) {
            this.GetAnnotationsInMosaicRegionAsync(section, bbox, MinRadius, ModifiedAfterThisUtcTime, null);
        }
        
        public void GetAnnotationsInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, System.Nullable<long> ModifiedAfterThisUtcTime, object userState) {
            if ((this.onBeginGetAnnotationsInMosaicRegionDelegate == null)) {
                this.onBeginGetAnnotationsInMosaicRegionDelegate = new BeginOperationDelegate(this.OnBeginGetAnnotationsInMosaicRegion);
            }
            if ((this.onEndGetAnnotationsInMosaicRegionDelegate == null)) {
                this.onEndGetAnnotationsInMosaicRegionDelegate = new EndOperationDelegate(this.OnEndGetAnnotationsInMosaicRegion);
            }
            if ((this.onGetAnnotationsInMosaicRegionCompletedDelegate == null)) {
                this.onGetAnnotationsInMosaicRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAnnotationsInMosaicRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetAnnotationsInMosaicRegionDelegate, new object[] {
                        section,
                        bbox,
                        MinRadius,
                        ModifiedAfterThisUtcTime}, this.onEndGetAnnotationsInMosaicRegionDelegate, this.onGetAnnotationsInMosaicRegionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.Location[] GetLocationChanges(out long QueryExecutedTime, out long[] DeletedIDs, long section, long ModifiedAfterThisUtcTime) {
            return base.Channel.GetLocationChanges(out QueryExecutedTime, out DeletedIDs, section, ModifiedAfterThisUtcTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationChanges(long section, long ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationChanges(section, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Location[] EndGetLocationChanges(out long QueryExecutedTime, out long[] DeletedIDs, System.IAsyncResult result) {
            return base.Channel.EndGetLocationChanges(out QueryExecutedTime, out DeletedIDs, result);
        }
        
        private System.IAsyncResult OnBeginGetLocationChanges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            long ModifiedAfterThisUtcTime = ((long)(inValues[1]));
            return this.BeginGetLocationChanges(section, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        private object[] OnEndGetLocationChanges(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            long[] DeletedIDs = this.GetDefaultValueForInitialization<long[]>();
            AnnotationService.Types.Location[] retVal = this.EndGetLocationChanges(out QueryExecutedTime, out DeletedIDs, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedIDs,
                    retVal};
        }
        
        private void OnGetLocationChangesCompleted(object state) {
            if ((this.GetLocationChangesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationChangesCompleted(this, new GetLocationChangesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationChangesAsync(long section, long ModifiedAfterThisUtcTime) {
            this.GetLocationChangesAsync(section, ModifiedAfterThisUtcTime, null);
        }
        
        public void GetLocationChangesAsync(long section, long ModifiedAfterThisUtcTime, object userState) {
            if ((this.onBeginGetLocationChangesDelegate == null)) {
                this.onBeginGetLocationChangesDelegate = new BeginOperationDelegate(this.OnBeginGetLocationChanges);
            }
            if ((this.onEndGetLocationChangesDelegate == null)) {
                this.onEndGetLocationChangesDelegate = new EndOperationDelegate(this.OnEndGetLocationChanges);
            }
            if ((this.onGetLocationChangesCompletedDelegate == null)) {
                this.onGetLocationChangesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationChangesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationChangesDelegate, new object[] {
                        section,
                        ModifiedAfterThisUtcTime}, this.onEndGetLocationChangesDelegate, this.onGetLocationChangesCompletedDelegate, userState);
        }
        
        public long[] Update(AnnotationService.Types.Location[] locations) {
            return base.Channel.Update(locations);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdate(AnnotationService.Types.Location[] locations, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(locations, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndUpdate(System.IAsyncResult result) {
            return base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AnnotationService.Types.Location[] locations = ((AnnotationService.Types.Location[])(inValues[0]));
            return this.BeginUpdate(locations, callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            long[] retVal = this.EndUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync(AnnotationService.Types.Location[] locations) {
            this.UpdateAsync(locations, null);
        }
        
        public void UpdateAsync(AnnotationService.Types.Location[] locations, object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, new object[] {
                        locations}, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
        
        public void CreateLocationLink(long SourceID, long TargetID) {
            base.Channel.CreateLocationLink(SourceID, TargetID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateLocationLink(long SourceID, long TargetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLocationLink(SourceID, TargetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCreateLocationLink(System.IAsyncResult result) {
            base.Channel.EndCreateLocationLink(result);
        }
        
        private System.IAsyncResult OnBeginCreateLocationLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long SourceID = ((long)(inValues[0]));
            long TargetID = ((long)(inValues[1]));
            return this.BeginCreateLocationLink(SourceID, TargetID, callback, asyncState);
        }
        
        private object[] OnEndCreateLocationLink(System.IAsyncResult result) {
            this.EndCreateLocationLink(result);
            return null;
        }
        
        private void OnCreateLocationLinkCompleted(object state) {
            if ((this.CreateLocationLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLocationLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLocationLinkAsync(long SourceID, long TargetID) {
            this.CreateLocationLinkAsync(SourceID, TargetID, null);
        }
        
        public void CreateLocationLinkAsync(long SourceID, long TargetID, object userState) {
            if ((this.onBeginCreateLocationLinkDelegate == null)) {
                this.onBeginCreateLocationLinkDelegate = new BeginOperationDelegate(this.OnBeginCreateLocationLink);
            }
            if ((this.onEndCreateLocationLinkDelegate == null)) {
                this.onEndCreateLocationLinkDelegate = new EndOperationDelegate(this.OnEndCreateLocationLink);
            }
            if ((this.onCreateLocationLinkCompletedDelegate == null)) {
                this.onCreateLocationLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLocationLinkCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLocationLinkDelegate, new object[] {
                        SourceID,
                        TargetID}, this.onEndCreateLocationLinkDelegate, this.onCreateLocationLinkCompletedDelegate, userState);
        }
        
        public void DeleteLocationLink(long SourceID, long TargetID) {
            base.Channel.DeleteLocationLink(SourceID, TargetID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteLocationLink(long SourceID, long TargetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLocationLink(SourceID, TargetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteLocationLink(System.IAsyncResult result) {
            base.Channel.EndDeleteLocationLink(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLocationLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long SourceID = ((long)(inValues[0]));
            long TargetID = ((long)(inValues[1]));
            return this.BeginDeleteLocationLink(SourceID, TargetID, callback, asyncState);
        }
        
        private object[] OnEndDeleteLocationLink(System.IAsyncResult result) {
            this.EndDeleteLocationLink(result);
            return null;
        }
        
        private void OnDeleteLocationLinkCompleted(object state) {
            if ((this.DeleteLocationLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLocationLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLocationLinkAsync(long SourceID, long TargetID) {
            this.DeleteLocationLinkAsync(SourceID, TargetID, null);
        }
        
        public void DeleteLocationLinkAsync(long SourceID, long TargetID, object userState) {
            if ((this.onBeginDeleteLocationLinkDelegate == null)) {
                this.onBeginDeleteLocationLinkDelegate = new BeginOperationDelegate(this.OnBeginDeleteLocationLink);
            }
            if ((this.onEndDeleteLocationLinkDelegate == null)) {
                this.onEndDeleteLocationLinkDelegate = new EndOperationDelegate(this.OnEndDeleteLocationLink);
            }
            if ((this.onDeleteLocationLinkCompletedDelegate == null)) {
                this.onDeleteLocationLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLocationLinkCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLocationLinkDelegate, new object[] {
                        SourceID,
                        TargetID}, this.onEndDeleteLocationLinkDelegate, this.onDeleteLocationLinkCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.LocationLink[] GetLocationLinksForSection(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, long section, long ModifiedAfterThisTime) {
            return base.Channel.GetLocationLinksForSection(out QueryExecutedTime, out DeletedLinks, section, ModifiedAfterThisTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationLinksForSection(long section, long ModifiedAfterThisTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationLinksForSection(section, ModifiedAfterThisTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.LocationLink[] EndGetLocationLinksForSection(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, System.IAsyncResult result) {
            return base.Channel.EndGetLocationLinksForSection(out QueryExecutedTime, out DeletedLinks, result);
        }
        
        private System.IAsyncResult OnBeginGetLocationLinksForSection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            long ModifiedAfterThisTime = ((long)(inValues[1]));
            return this.BeginGetLocationLinksForSection(section, ModifiedAfterThisTime, callback, asyncState);
        }
        
        private object[] OnEndGetLocationLinksForSection(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            AnnotationService.Types.LocationLink[] DeletedLinks = this.GetDefaultValueForInitialization<AnnotationService.Types.LocationLink[]>();
            AnnotationService.Types.LocationLink[] retVal = this.EndGetLocationLinksForSection(out QueryExecutedTime, out DeletedLinks, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedLinks,
                    retVal};
        }
        
        private void OnGetLocationLinksForSectionCompleted(object state) {
            if ((this.GetLocationLinksForSectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationLinksForSectionCompleted(this, new GetLocationLinksForSectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationLinksForSectionAsync(long section, long ModifiedAfterThisTime) {
            this.GetLocationLinksForSectionAsync(section, ModifiedAfterThisTime, null);
        }
        
        public void GetLocationLinksForSectionAsync(long section, long ModifiedAfterThisTime, object userState) {
            if ((this.onBeginGetLocationLinksForSectionDelegate == null)) {
                this.onBeginGetLocationLinksForSectionDelegate = new BeginOperationDelegate(this.OnBeginGetLocationLinksForSection);
            }
            if ((this.onEndGetLocationLinksForSectionDelegate == null)) {
                this.onEndGetLocationLinksForSectionDelegate = new EndOperationDelegate(this.OnEndGetLocationLinksForSection);
            }
            if ((this.onGetLocationLinksForSectionCompletedDelegate == null)) {
                this.onGetLocationLinksForSectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationLinksForSectionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationLinksForSectionDelegate, new object[] {
                        section,
                        ModifiedAfterThisTime}, this.onEndGetLocationLinksForSectionDelegate, this.onGetLocationLinksForSectionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.LocationLink[] GetLocationLinksForSectionInMosaicRegion(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisUtcTime) {
            return base.Channel.GetLocationLinksForSectionInMosaicRegion(out QueryExecutedTime, out DeletedLinks, section, bbox, MinRadius, ModifiedAfterThisUtcTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationLinksForSectionInMosaicRegion(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisUtcTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationLinksForSectionInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.LocationLink[] EndGetLocationLinksForSectionInMosaicRegion(out long QueryExecutedTime, out AnnotationService.Types.LocationLink[] DeletedLinks, System.IAsyncResult result) {
            return base.Channel.EndGetLocationLinksForSectionInMosaicRegion(out QueryExecutedTime, out DeletedLinks, result);
        }
        
        private System.IAsyncResult OnBeginGetLocationLinksForSectionInMosaicRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long section = ((long)(inValues[0]));
            AnnotationService.Types.BoundingRectangle bbox = ((AnnotationService.Types.BoundingRectangle)(inValues[1]));
            double MinRadius = ((double)(inValues[2]));
            long ModifiedAfterThisUtcTime = ((long)(inValues[3]));
            return this.BeginGetLocationLinksForSectionInMosaicRegion(section, bbox, MinRadius, ModifiedAfterThisUtcTime, callback, asyncState);
        }
        
        private object[] OnEndGetLocationLinksForSectionInMosaicRegion(System.IAsyncResult result) {
            long QueryExecutedTime = this.GetDefaultValueForInitialization<long>();
            AnnotationService.Types.LocationLink[] DeletedLinks = this.GetDefaultValueForInitialization<AnnotationService.Types.LocationLink[]>();
            AnnotationService.Types.LocationLink[] retVal = this.EndGetLocationLinksForSectionInMosaicRegion(out QueryExecutedTime, out DeletedLinks, result);
            return new object[] {
                    QueryExecutedTime,
                    DeletedLinks,
                    retVal};
        }
        
        private void OnGetLocationLinksForSectionInMosaicRegionCompleted(object state) {
            if ((this.GetLocationLinksForSectionInMosaicRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationLinksForSectionInMosaicRegionCompleted(this, new GetLocationLinksForSectionInMosaicRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationLinksForSectionInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisUtcTime) {
            this.GetLocationLinksForSectionInMosaicRegionAsync(section, bbox, MinRadius, ModifiedAfterThisUtcTime, null);
        }
        
        public void GetLocationLinksForSectionInMosaicRegionAsync(long section, AnnotationService.Types.BoundingRectangle bbox, double MinRadius, long ModifiedAfterThisUtcTime, object userState) {
            if ((this.onBeginGetLocationLinksForSectionInMosaicRegionDelegate == null)) {
                this.onBeginGetLocationLinksForSectionInMosaicRegionDelegate = new BeginOperationDelegate(this.OnBeginGetLocationLinksForSectionInMosaicRegion);
            }
            if ((this.onEndGetLocationLinksForSectionInMosaicRegionDelegate == null)) {
                this.onEndGetLocationLinksForSectionInMosaicRegionDelegate = new EndOperationDelegate(this.OnEndGetLocationLinksForSectionInMosaicRegion);
            }
            if ((this.onGetLocationLinksForSectionInMosaicRegionCompletedDelegate == null)) {
                this.onGetLocationLinksForSectionInMosaicRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationLinksForSectionInMosaicRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationLinksForSectionInMosaicRegionDelegate, new object[] {
                        section,
                        bbox,
                        MinRadius,
                        ModifiedAfterThisUtcTime}, this.onEndGetLocationLinksForSectionInMosaicRegionDelegate, this.onGetLocationLinksForSectionInMosaicRegionCompletedDelegate, userState);
        }
        
        public AnnotationService.Types.LocationHistory[] GetLocationChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time) {
            return base.Channel.GetLocationChangeLog(structure_id, begin_time, end_time);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocationChangeLog(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationChangeLog(structure_id, begin_time, end_time, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.LocationHistory[] EndGetLocationChangeLog(System.IAsyncResult result) {
            return base.Channel.EndGetLocationChangeLog(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationChangeLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<long> structure_id = ((System.Nullable<long>)(inValues[0]));
            System.Nullable<System.DateTime> begin_time = ((System.Nullable<System.DateTime>)(inValues[1]));
            System.Nullable<System.DateTime> end_time = ((System.Nullable<System.DateTime>)(inValues[2]));
            return this.BeginGetLocationChangeLog(structure_id, begin_time, end_time, callback, asyncState);
        }
        
        private object[] OnEndGetLocationChangeLog(System.IAsyncResult result) {
            AnnotationService.Types.LocationHistory[] retVal = this.EndGetLocationChangeLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationChangeLogCompleted(object state) {
            if ((this.GetLocationChangeLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationChangeLogCompleted(this, new GetLocationChangeLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationChangeLogAsync(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time) {
            this.GetLocationChangeLogAsync(structure_id, begin_time, end_time, null);
        }
        
        public void GetLocationChangeLogAsync(System.Nullable<long> structure_id, System.Nullable<System.DateTime> begin_time, System.Nullable<System.DateTime> end_time, object userState) {
            if ((this.onBeginGetLocationChangeLogDelegate == null)) {
                this.onBeginGetLocationChangeLogDelegate = new BeginOperationDelegate(this.OnBeginGetLocationChangeLog);
            }
            if ((this.onEndGetLocationChangeLogDelegate == null)) {
                this.onEndGetLocationChangeLogDelegate = new EndOperationDelegate(this.OnEndGetLocationChangeLog);
            }
            if ((this.onGetLocationChangeLogCompletedDelegate == null)) {
                this.onGetLocationChangeLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationChangeLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationChangeLogDelegate, new object[] {
                        structure_id,
                        begin_time,
                        end_time}, this.onEndGetLocationChangeLogDelegate, this.onGetLocationChangeLogCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IVolumeMeta")]
    public interface IVolumeMeta {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVolumeMeta/GetScale", ReplyAction="http://tempuri.org/IVolumeMeta/GetScaleResponse")]
        AnnotationService.Types.Scale GetScale();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVolumeMeta/GetScale", ReplyAction="http://tempuri.org/IVolumeMeta/GetScaleResponse")]
        System.IAsyncResult BeginGetScale(System.AsyncCallback callback, object asyncState);
        
        AnnotationService.Types.Scale EndGetScale(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVolumeMetaChannel : WebAnnotationModel.Service.IVolumeMeta, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AnnotationService.Types.Scale Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AnnotationService.Types.Scale)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VolumeMetaClient : System.ServiceModel.ClientBase<WebAnnotationModel.Service.IVolumeMeta>, WebAnnotationModel.Service.IVolumeMeta {
        
        private BeginOperationDelegate onBeginGetScaleDelegate;
        
        private EndOperationDelegate onEndGetScaleDelegate;
        
        private System.Threading.SendOrPostCallback onGetScaleCompletedDelegate;
        
        public VolumeMetaClient() {
        }
        
        public VolumeMetaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VolumeMetaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VolumeMetaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VolumeMetaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetScaleCompletedEventArgs> GetScaleCompleted;
        
        public AnnotationService.Types.Scale GetScale() {
            return base.Channel.GetScale();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScale(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScale(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AnnotationService.Types.Scale EndGetScale(System.IAsyncResult result) {
            return base.Channel.EndGetScale(result);
        }
        
        private System.IAsyncResult OnBeginGetScale(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetScale(callback, asyncState);
        }
        
        private object[] OnEndGetScale(System.IAsyncResult result) {
            AnnotationService.Types.Scale retVal = this.EndGetScale(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScaleCompleted(object state) {
            if ((this.GetScaleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScaleCompleted(this, new GetScaleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScaleAsync() {
            this.GetScaleAsync(null);
        }
        
        public void GetScaleAsync(object userState) {
            if ((this.onBeginGetScaleDelegate == null)) {
                this.onBeginGetScaleDelegate = new BeginOperationDelegate(this.OnBeginGetScale);
            }
            if ((this.onEndGetScaleDelegate == null)) {
                this.onEndGetScaleDelegate = new EndOperationDelegate(this.OnEndGetScale);
            }
            if ((this.onGetScaleCompletedDelegate == null)) {
                this.onGetScaleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScaleCompleted);
            }
            base.InvokeAsync(this.onBeginGetScaleDelegate, null, this.onEndGetScaleDelegate, this.onGetScaleCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.ICircuit")]
    public interface ICircuit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getGraph", ReplyAction="http://tempuri.org/ICircuit/getGraphResponse")]
        WebAnnotationModel.Service.Graphx getGraph(int cellID, int numHops);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICircuit/getGraph", ReplyAction="http://tempuri.org/ICircuit/getGraphResponse")]
        System.IAsyncResult BegingetGraph(int cellID, int numHops, System.AsyncCallback callback, object asyncState);
        
        WebAnnotationModel.Service.Graphx EndgetGraph(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getStructuresByTypeID", ReplyAction="http://tempuri.org/ICircuit/getStructuresByTypeIDResponse")]
        long[] getStructuresByTypeID(int typeID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICircuit/getStructuresByTypeID", ReplyAction="http://tempuri.org/ICircuit/getStructuresByTypeIDResponse")]
        System.IAsyncResult BegingetStructuresByTypeID(int typeID, System.AsyncCallback callback, object asyncState);
        
        long[] EndgetStructuresByTypeID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getSynapses", ReplyAction="http://tempuri.org/ICircuit/getSynapsesResponse")]
        string[] getSynapses(int cellID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICircuit/getSynapses", ReplyAction="http://tempuri.org/ICircuit/getSynapsesResponse")]
        System.IAsyncResult BegingetSynapses(int cellID, System.AsyncCallback callback, object asyncState);
        
        string[] EndgetSynapses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getSynapseStats", ReplyAction="http://tempuri.org/ICircuit/getSynapseStatsResponse")]
        WebAnnotationModel.Service.SynapseObject getSynapseStats();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICircuit/getSynapseStats", ReplyAction="http://tempuri.org/ICircuit/getSynapseStatsResponse")]
        System.IAsyncResult BegingetSynapseStats(System.AsyncCallback callback, object asyncState);
        
        WebAnnotationModel.Service.SynapseObject EndgetSynapseStats(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getTopConnectedStructures", ReplyAction="http://tempuri.org/ICircuit/getTopConnectedStructuresResponse")]
        string[] getTopConnectedStructures(int num);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICircuit/getTopConnectedStructures", ReplyAction="http://tempuri.org/ICircuit/getTopConnectedStructuresResponse")]
        System.IAsyncResult BegingetTopConnectedStructures(int num, System.AsyncCallback callback, object asyncState);
        
        string[] EndgetTopConnectedStructures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getTopConnectedCells", ReplyAction="http://tempuri.org/ICircuit/getTopConnectedCellsResponse")]
        string[] getTopConnectedCells();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICircuit/getTopConnectedCells", ReplyAction="http://tempuri.org/ICircuit/getTopConnectedCellsResponse")]
        System.IAsyncResult BegingetTopConnectedCells(System.AsyncCallback callback, object asyncState);
        
        string[] EndgetTopConnectedCells(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICircuitChannel : WebAnnotationModel.Service.ICircuit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebAnnotationModel.Service.Graphx Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebAnnotationModel.Service.Graphx)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getStructuresByTypeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getStructuresByTypeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSynapsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSynapsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSynapseStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSynapseStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebAnnotationModel.Service.SynapseObject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebAnnotationModel.Service.SynapseObject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTopConnectedStructuresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTopConnectedStructuresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTopConnectedCellsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTopConnectedCellsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CircuitClient : System.ServiceModel.ClientBase<WebAnnotationModel.Service.ICircuit>, WebAnnotationModel.Service.ICircuit {
        
        private BeginOperationDelegate onBegingetGraphDelegate;
        
        private EndOperationDelegate onEndgetGraphDelegate;
        
        private System.Threading.SendOrPostCallback ongetGraphCompletedDelegate;
        
        private BeginOperationDelegate onBegingetStructuresByTypeIDDelegate;
        
        private EndOperationDelegate onEndgetStructuresByTypeIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetStructuresByTypeIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSynapsesDelegate;
        
        private EndOperationDelegate onEndgetSynapsesDelegate;
        
        private System.Threading.SendOrPostCallback ongetSynapsesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSynapseStatsDelegate;
        
        private EndOperationDelegate onEndgetSynapseStatsDelegate;
        
        private System.Threading.SendOrPostCallback ongetSynapseStatsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTopConnectedStructuresDelegate;
        
        private EndOperationDelegate onEndgetTopConnectedStructuresDelegate;
        
        private System.Threading.SendOrPostCallback ongetTopConnectedStructuresCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTopConnectedCellsDelegate;
        
        private EndOperationDelegate onEndgetTopConnectedCellsDelegate;
        
        private System.Threading.SendOrPostCallback ongetTopConnectedCellsCompletedDelegate;
        
        public CircuitClient() {
        }
        
        public CircuitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CircuitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CircuitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CircuitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<getGraphCompletedEventArgs> getGraphCompleted;
        
        public event System.EventHandler<getStructuresByTypeIDCompletedEventArgs> getStructuresByTypeIDCompleted;
        
        public event System.EventHandler<getSynapsesCompletedEventArgs> getSynapsesCompleted;
        
        public event System.EventHandler<getSynapseStatsCompletedEventArgs> getSynapseStatsCompleted;
        
        public event System.EventHandler<getTopConnectedStructuresCompletedEventArgs> getTopConnectedStructuresCompleted;
        
        public event System.EventHandler<getTopConnectedCellsCompletedEventArgs> getTopConnectedCellsCompleted;
        
        public WebAnnotationModel.Service.Graphx getGraph(int cellID, int numHops) {
            return base.Channel.getGraph(cellID, numHops);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetGraph(int cellID, int numHops, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetGraph(cellID, numHops, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WebAnnotationModel.Service.Graphx EndgetGraph(System.IAsyncResult result) {
            return base.Channel.EndgetGraph(result);
        }
        
        private System.IAsyncResult OnBegingetGraph(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cellID = ((int)(inValues[0]));
            int numHops = ((int)(inValues[1]));
            return this.BegingetGraph(cellID, numHops, callback, asyncState);
        }
        
        private object[] OnEndgetGraph(System.IAsyncResult result) {
            WebAnnotationModel.Service.Graphx retVal = this.EndgetGraph(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetGraphCompleted(object state) {
            if ((this.getGraphCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getGraphCompleted(this, new getGraphCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getGraphAsync(int cellID, int numHops) {
            this.getGraphAsync(cellID, numHops, null);
        }
        
        public void getGraphAsync(int cellID, int numHops, object userState) {
            if ((this.onBegingetGraphDelegate == null)) {
                this.onBegingetGraphDelegate = new BeginOperationDelegate(this.OnBegingetGraph);
            }
            if ((this.onEndgetGraphDelegate == null)) {
                this.onEndgetGraphDelegate = new EndOperationDelegate(this.OnEndgetGraph);
            }
            if ((this.ongetGraphCompletedDelegate == null)) {
                this.ongetGraphCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetGraphCompleted);
            }
            base.InvokeAsync(this.onBegingetGraphDelegate, new object[] {
                        cellID,
                        numHops}, this.onEndgetGraphDelegate, this.ongetGraphCompletedDelegate, userState);
        }
        
        public long[] getStructuresByTypeID(int typeID) {
            return base.Channel.getStructuresByTypeID(typeID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetStructuresByTypeID(int typeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetStructuresByTypeID(typeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long[] EndgetStructuresByTypeID(System.IAsyncResult result) {
            return base.Channel.EndgetStructuresByTypeID(result);
        }
        
        private System.IAsyncResult OnBegingetStructuresByTypeID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int typeID = ((int)(inValues[0]));
            return this.BegingetStructuresByTypeID(typeID, callback, asyncState);
        }
        
        private object[] OnEndgetStructuresByTypeID(System.IAsyncResult result) {
            long[] retVal = this.EndgetStructuresByTypeID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetStructuresByTypeIDCompleted(object state) {
            if ((this.getStructuresByTypeIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getStructuresByTypeIDCompleted(this, new getStructuresByTypeIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getStructuresByTypeIDAsync(int typeID) {
            this.getStructuresByTypeIDAsync(typeID, null);
        }
        
        public void getStructuresByTypeIDAsync(int typeID, object userState) {
            if ((this.onBegingetStructuresByTypeIDDelegate == null)) {
                this.onBegingetStructuresByTypeIDDelegate = new BeginOperationDelegate(this.OnBegingetStructuresByTypeID);
            }
            if ((this.onEndgetStructuresByTypeIDDelegate == null)) {
                this.onEndgetStructuresByTypeIDDelegate = new EndOperationDelegate(this.OnEndgetStructuresByTypeID);
            }
            if ((this.ongetStructuresByTypeIDCompletedDelegate == null)) {
                this.ongetStructuresByTypeIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetStructuresByTypeIDCompleted);
            }
            base.InvokeAsync(this.onBegingetStructuresByTypeIDDelegate, new object[] {
                        typeID}, this.onEndgetStructuresByTypeIDDelegate, this.ongetStructuresByTypeIDCompletedDelegate, userState);
        }
        
        public string[] getSynapses(int cellID) {
            return base.Channel.getSynapses(cellID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSynapses(int cellID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSynapses(cellID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndgetSynapses(System.IAsyncResult result) {
            return base.Channel.EndgetSynapses(result);
        }
        
        private System.IAsyncResult OnBegingetSynapses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cellID = ((int)(inValues[0]));
            return this.BegingetSynapses(cellID, callback, asyncState);
        }
        
        private object[] OnEndgetSynapses(System.IAsyncResult result) {
            string[] retVal = this.EndgetSynapses(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSynapsesCompleted(object state) {
            if ((this.getSynapsesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSynapsesCompleted(this, new getSynapsesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSynapsesAsync(int cellID) {
            this.getSynapsesAsync(cellID, null);
        }
        
        public void getSynapsesAsync(int cellID, object userState) {
            if ((this.onBegingetSynapsesDelegate == null)) {
                this.onBegingetSynapsesDelegate = new BeginOperationDelegate(this.OnBegingetSynapses);
            }
            if ((this.onEndgetSynapsesDelegate == null)) {
                this.onEndgetSynapsesDelegate = new EndOperationDelegate(this.OnEndgetSynapses);
            }
            if ((this.ongetSynapsesCompletedDelegate == null)) {
                this.ongetSynapsesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSynapsesCompleted);
            }
            base.InvokeAsync(this.onBegingetSynapsesDelegate, new object[] {
                        cellID}, this.onEndgetSynapsesDelegate, this.ongetSynapsesCompletedDelegate, userState);
        }
        
        public WebAnnotationModel.Service.SynapseObject getSynapseStats() {
            return base.Channel.getSynapseStats();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSynapseStats(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSynapseStats(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WebAnnotationModel.Service.SynapseObject EndgetSynapseStats(System.IAsyncResult result) {
            return base.Channel.EndgetSynapseStats(result);
        }
        
        private System.IAsyncResult OnBegingetSynapseStats(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSynapseStats(callback, asyncState);
        }
        
        private object[] OnEndgetSynapseStats(System.IAsyncResult result) {
            WebAnnotationModel.Service.SynapseObject retVal = this.EndgetSynapseStats(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSynapseStatsCompleted(object state) {
            if ((this.getSynapseStatsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSynapseStatsCompleted(this, new getSynapseStatsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSynapseStatsAsync() {
            this.getSynapseStatsAsync(null);
        }
        
        public void getSynapseStatsAsync(object userState) {
            if ((this.onBegingetSynapseStatsDelegate == null)) {
                this.onBegingetSynapseStatsDelegate = new BeginOperationDelegate(this.OnBegingetSynapseStats);
            }
            if ((this.onEndgetSynapseStatsDelegate == null)) {
                this.onEndgetSynapseStatsDelegate = new EndOperationDelegate(this.OnEndgetSynapseStats);
            }
            if ((this.ongetSynapseStatsCompletedDelegate == null)) {
                this.ongetSynapseStatsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSynapseStatsCompleted);
            }
            base.InvokeAsync(this.onBegingetSynapseStatsDelegate, null, this.onEndgetSynapseStatsDelegate, this.ongetSynapseStatsCompletedDelegate, userState);
        }
        
        public string[] getTopConnectedStructures(int num) {
            return base.Channel.getTopConnectedStructures(num);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetTopConnectedStructures(int num, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTopConnectedStructures(num, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndgetTopConnectedStructures(System.IAsyncResult result) {
            return base.Channel.EndgetTopConnectedStructures(result);
        }
        
        private System.IAsyncResult OnBegingetTopConnectedStructures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int num = ((int)(inValues[0]));
            return this.BegingetTopConnectedStructures(num, callback, asyncState);
        }
        
        private object[] OnEndgetTopConnectedStructures(System.IAsyncResult result) {
            string[] retVal = this.EndgetTopConnectedStructures(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTopConnectedStructuresCompleted(object state) {
            if ((this.getTopConnectedStructuresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTopConnectedStructuresCompleted(this, new getTopConnectedStructuresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTopConnectedStructuresAsync(int num) {
            this.getTopConnectedStructuresAsync(num, null);
        }
        
        public void getTopConnectedStructuresAsync(int num, object userState) {
            if ((this.onBegingetTopConnectedStructuresDelegate == null)) {
                this.onBegingetTopConnectedStructuresDelegate = new BeginOperationDelegate(this.OnBegingetTopConnectedStructures);
            }
            if ((this.onEndgetTopConnectedStructuresDelegate == null)) {
                this.onEndgetTopConnectedStructuresDelegate = new EndOperationDelegate(this.OnEndgetTopConnectedStructures);
            }
            if ((this.ongetTopConnectedStructuresCompletedDelegate == null)) {
                this.ongetTopConnectedStructuresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTopConnectedStructuresCompleted);
            }
            base.InvokeAsync(this.onBegingetTopConnectedStructuresDelegate, new object[] {
                        num}, this.onEndgetTopConnectedStructuresDelegate, this.ongetTopConnectedStructuresCompletedDelegate, userState);
        }
        
        public string[] getTopConnectedCells() {
            return base.Channel.getTopConnectedCells();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetTopConnectedCells(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTopConnectedCells(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndgetTopConnectedCells(System.IAsyncResult result) {
            return base.Channel.EndgetTopConnectedCells(result);
        }
        
        private System.IAsyncResult OnBegingetTopConnectedCells(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetTopConnectedCells(callback, asyncState);
        }
        
        private object[] OnEndgetTopConnectedCells(System.IAsyncResult result) {
            string[] retVal = this.EndgetTopConnectedCells(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTopConnectedCellsCompleted(object state) {
            if ((this.getTopConnectedCellsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTopConnectedCellsCompleted(this, new getTopConnectedCellsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTopConnectedCellsAsync() {
            this.getTopConnectedCellsAsync(null);
        }
        
        public void getTopConnectedCellsAsync(object userState) {
            if ((this.onBegingetTopConnectedCellsDelegate == null)) {
                this.onBegingetTopConnectedCellsDelegate = new BeginOperationDelegate(this.OnBegingetTopConnectedCells);
            }
            if ((this.onEndgetTopConnectedCellsDelegate == null)) {
                this.onEndgetTopConnectedCellsDelegate = new EndOperationDelegate(this.OnEndgetTopConnectedCells);
            }
            if ((this.ongetTopConnectedCellsCompletedDelegate == null)) {
                this.ongetTopConnectedCellsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTopConnectedCellsCompleted);
            }
            base.InvokeAsync(this.onBegingetTopConnectedCellsDelegate, null, this.onEndgetTopConnectedCellsDelegate, this.ongetTopConnectedCellsCompletedDelegate, userState);
        }
    }
}

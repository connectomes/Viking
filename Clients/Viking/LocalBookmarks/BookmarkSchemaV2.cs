//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder1?, Bookmark?, Comment)*
    /// </para>
    /// </summary>
    public partial class Folder : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Folder> Folder1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Bookmark> BookmarkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> CommentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string ShapeDefaultValue = "Inherit";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Folder(XElement xe) { return XTypedServices.ToXTypedElement<Folder>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Folder() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder1?, Bookmark?, Comment)*
        /// </para>
        /// </summary>
        public Folder() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder1?, Bookmark?, Comment)*
        /// </para>
        /// </summary>
        public IList<Folder> Folders {
            get {
                if ((this.Folder1Field == null)) {
                    this.Folder1Field = new XTypedList<Folder>(this, LinqToXsdTypeManager.Instance, XName.Get("Folder", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                }
                return this.Folder1Field;
            }
            set {
                if ((value == null)) {
                    this.Folder1Field = null;
                }
                else {
                    if ((this.Folder1Field == null)) {
                        this.Folder1Field = XTypedList<Folder>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Folder", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                    }
                    else {
                        XTypedServices.SetList<Folder>(this.Folder1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder1?, Bookmark?, Comment)*
        /// </para>
        /// </summary>
        public IList<Bookmark> Bookmarks {
            get {
                if ((this.BookmarkField == null)) {
                    this.BookmarkField = new XTypedList<Bookmark>(this, LinqToXsdTypeManager.Instance, XName.Get("Bookmark", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                }
                return this.BookmarkField;
            }
            set {
                if ((value == null)) {
                    this.BookmarkField = null;
                }
                else {
                    if ((this.BookmarkField == null)) {
                        this.BookmarkField = XTypedList<Bookmark>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Bookmark", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                    }
                    else {
                        XTypedServices.SetList<Bookmark>(this.BookmarkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Folder1?, Bookmark?, Comment)*
        /// </para>
        /// </summary>
        public IList<string> Comment {
            get {
                if ((this.CommentField == null)) {
                    this.CommentField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                }
                return this.CommentField;
            }
            set {
                if ((value == null)) {
                    this.CommentField = null;
                }
                else {
                    if ((this.CommentField == null)) {
                        this.CommentField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.CommentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Color {
            get {
                XAttribute x = this.Attribute(XName.Get("Color", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Color", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Shape {
            get {
                XAttribute x = this.Attribute(XName.Get("Shape", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ShapeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("Shape", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Folder", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Folder Load(string xmlFile) {
            return XTypedServices.Load<Folder>(xmlFile);
        }
        
        public static Folder Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Folder>(xmlFile);
        }
        
        public static Folder Parse(string xml) {
            return XTypedServices.Parse<Folder>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Folder>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Folder", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(Folder));
            localElementDictionary.Add(XName.Get("Bookmark", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(Bookmark));
            localElementDictionary.Add(XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Point2D : XTypedElement, IXMetaData {
        
         public static explicit operator Point2D(XElement xe) { return XTypedServices.ToXTypedElement<Point2D>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Point2D() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///          X Coordinate
        ///        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public double X {
            get {
                XAttribute x = this.Attribute(XName.Get("X", ""));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("X", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///          Y Coordinate
        ///        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public double Y {
            get {
                XAttribute x = this.Attribute(XName.Get("Y", ""));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Y", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Point2D", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Point2D>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class View : XTypedElement, IXMetaData {
        
         public static explicit operator View(XElement xe) { return XTypedServices.ToXTypedElement<View>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public View() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public double Downsample {
            get {
                XAttribute x = this.Attribute(XName.Get("Downsample", ""));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Downsample", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("View", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<View>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VolumePosition, MosaicPosition, View, Comment)
    /// </para>
    /// </summary>
    public partial class Bookmark : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Bookmark(XElement xe) { return XTypedServices.ToXTypedElement<Bookmark>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Bookmark() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VolumePosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd")), new NamedContentModelEntity(XName.Get("MosaicPosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd")), new NamedContentModelEntity(XName.Get("View", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd")), new NamedContentModelEntity(XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VolumePosition, MosaicPosition, View, Comment)
        /// </para>
        /// </summary>
        public Bookmark() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Position in volume coordinates.
        ///          
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolumePosition, MosaicPosition, View, Comment)
        /// </para>
        /// </summary>
        public Point2D VolumePosition {
            get {
                XElement x = this.GetElement(XName.Get("VolumePosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                return ((Point2D)(x));
            }
            set {
                this.SetElement(XName.Get("VolumePosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Position in mosiac coordinates.  If present the volume coordinates may be ignored and recalculated from this value using the appropriate slice-to-volume transform.
        ///          
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolumePosition, MosaicPosition, View, Comment)
        /// </para>
        /// </summary>
        public Point2D MosaicPosition {
            get {
                XElement x = this.GetElement(XName.Get("MosaicPosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                return ((Point2D)(x));
            }
            set {
                this.SetElement(XName.Get("MosaicPosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolumePosition, MosaicPosition, View, Comment)
        /// </para>
        /// </summary>
        public View View {
            get {
                XElement x = this.GetElement(XName.Get("View", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                return ((View)(x));
            }
            set {
                this.SetElement(XName.Get("View", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolumePosition, MosaicPosition, View, Comment)
        /// </para>
        /// </summary>
        public string Comment {
            get {
                XElement x = this.GetElement(XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///          Section number in the volume
        ///        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public double Z {
            get {
                XAttribute x = this.Attribute(XName.Get("Z", ""));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Z", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Bookmark", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Bookmark>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VolumePosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(Point2D));
            localElementDictionary.Add(XName.Get("MosaicPosition", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(Point2D));
            localElementDictionary.Add(XName.Get("View", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(View));
            localElementDictionary.Add(XName.Get("Comment", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class ShapeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Arrow",
                        "Ring",
                        "Star",
                        "Inherit"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ShapeType() {
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("Point2D", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.Point2D));
            typeDictionary.Add(XName.Get("View", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.View));
            typeDictionary.Add(XName.Get("Bookmark", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.Bookmark));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("Folder", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd"), typeof(global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.Folder));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("Folder", "http://connectomes.utah.edu/XSD/BookmarkSchemaV2.xsd")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Folder Folder {  get {return rootObject as Folder; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Folder root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.Folder Folder {  get {return rootObject as global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.Folder; } }
        
        private XRoot() {
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.BookmarkSchemaV2.xsd.Folder root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}

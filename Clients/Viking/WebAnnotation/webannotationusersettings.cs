//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value | Action | Variable)+
    /// </para>
    /// </summary>
    public partial class Parameters : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Value> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Action> ActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Variable> VariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Parameters(XElement xe) { return XTypedServices.ToXTypedElement<Parameters>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Parameters() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value | Action | Variable)+
        /// </para>
        /// </summary>
        public Parameters() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Value | Action | Variable)+
        /// </para>
        /// </summary>
        public IList<Value> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<Value>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<Value>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    else {
                        XTypedServices.SetList<Value>(this.ValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Value | Action | Variable)+
        /// </para>
        /// </summary>
        public IList<Action> Action {
            get {
                if ((this.ActionField == null)) {
                    this.ActionField = new XTypedList<Action>(this, LinqToXsdTypeManager.Instance, XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                }
                return this.ActionField;
            }
            set {
                if ((value == null)) {
                    this.ActionField = null;
                }
                else {
                    if ((this.ActionField == null)) {
                        this.ActionField = XTypedList<Action>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    else {
                        XTypedServices.SetList<Action>(this.ActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Value | Action | Variable)+
        /// </para>
        /// </summary>
        public IList<Variable> Variable {
            get {
                if ((this.VariableField == null)) {
                    this.VariableField = new XTypedList<Variable>(this, LinqToXsdTypeManager.Instance, XName.Get("Variable", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                }
                return this.VariableField;
            }
            set {
                if ((value == null)) {
                    this.VariableField = null;
                }
                else {
                    if ((this.VariableField == null)) {
                        this.VariableField = XTypedList<Variable>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Variable", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    else {
                        XTypedServices.SetList<Variable>(this.VariableField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Parameters Load(string xmlFile) {
            return XTypedServices.Load<Parameters>(xmlFile);
        }
        
        public static Parameters Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Parameters>(xmlFile);
        }
        
        public static Parameters Parse(string xml) {
            return XTypedServices.Parse<Parameters>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Parameters>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(Value));
            localElementDictionary.Add(XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(Action));
            localElementDictionary.Add(XName.Get("Variable", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(Variable));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Value : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string TypeDefaultValue = "System.String";
        
         public static explicit operator Value(XElement xe) { return XTypedServices.ToXTypedElement<Value>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Value() {
        }
        
        /// <summary>
        /// <para>
        /// The .NET type of the parameter, defaults to string
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, TypeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The value of the parameter
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Value1 {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int Index {
            get {
                XAttribute x = this.Attribute(XName.Get("Index", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Value", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Value Load(string xmlFile) {
            return XTypedServices.Load<Value>(xmlFile);
        }
        
        public static Value Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Value>(xmlFile);
        }
        
        public static Value Parse(string xml) {
            return XTypedServices.Parse<Value>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Value>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Variable : XTypedElement, IXMetaData {
        
         public static explicit operator Variable(XElement xe) { return XTypedServices.ToXTypedElement<Variable>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Variable() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Object {
            get {
                XAttribute x = this.Attribute(XName.Get("Object", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Object", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The variable to use
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Property {
            get {
                XAttribute x = this.Attribute(XName.Get("Property", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Property", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int Index {
            get {
                XAttribute x = this.Attribute(XName.Get("Index", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Variable", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Variable Load(string xmlFile) {
            return XTypedServices.Load<Variable>(xmlFile);
        }
        
        public static Variable Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Variable>(xmlFile);
        }
        
        public static Variable Parse(string xml) {
            return XTypedServices.Parse<Variable>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Variable>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CreateStructureCommandAction : XTypedElement, IXMetaData {
        
         public static explicit operator CreateStructureCommandAction(XElement xe) { return XTypedServices.ToXTypedElement<CreateStructureCommandAction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CreateStructureCommandAction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal TypeID {
            get {
                XAttribute x = this.Attribute(XName.Get("TypeID", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TypeID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Semicolon delimited list of tags to add to new structure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Tags {
            get {
                XAttribute x = this.Attribute(XName.Get("Tags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Tags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AnnotationType {
            get {
                XAttribute x = this.Attribute(XName.Get("AnnotationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AnnotationType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CreateStructureCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CreateStructureCommandAction Load(string xmlFile) {
            return XTypedServices.Load<CreateStructureCommandAction>(xmlFile);
        }
        
        public static CreateStructureCommandAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CreateStructureCommandAction>(xmlFile);
        }
        
        public static CreateStructureCommandAction Parse(string xml) {
            return XTypedServices.Parse<CreateStructureCommandAction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CreateStructureCommandAction>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ToggleStructureTagCommandAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool SetValueToUsernameDefaultValue = System.Xml.XmlConvert.ToBoolean("0");
        
         public static explicit operator ToggleStructureTagCommandAction(XElement xe) { return XTypedServices.ToXTypedElement<ToggleStructureTagCommandAction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ToggleStructureTagCommandAction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Tag {
            get {
                XAttribute x = this.Attribute(XName.Get("Tag", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Tag", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool SetValueToUsername {
            get {
                XAttribute x = this.Attribute(XName.Get("SetValueToUsername", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, SetValueToUsernameDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("SetValueToUsername", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ToggleStructureTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ToggleStructureTagCommandAction Load(string xmlFile) {
            return XTypedServices.Load<ToggleStructureTagCommandAction>(xmlFile);
        }
        
        public static ToggleStructureTagCommandAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ToggleStructureTagCommandAction>(xmlFile);
        }
        
        public static ToggleStructureTagCommandAction Parse(string xml) {
            return XTypedServices.Parse<ToggleStructureTagCommandAction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToggleStructureTagCommandAction>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ToggleLocationTagCommandAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool SetValueToUsernameDefaultValue = System.Xml.XmlConvert.ToBoolean("0");
        
         public static explicit operator ToggleLocationTagCommandAction(XElement xe) { return XTypedServices.ToXTypedElement<ToggleLocationTagCommandAction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ToggleLocationTagCommandAction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Tag {
            get {
                XAttribute x = this.Attribute(XName.Get("Tag", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Tag", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool SetValueToUsername {
            get {
                XAttribute x = this.Attribute(XName.Get("SetValueToUsername", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, SetValueToUsernameDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("SetValueToUsername", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ToggleLocationTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ToggleLocationTagCommandAction Load(string xmlFile) {
            return XTypedServices.Load<ToggleLocationTagCommandAction>(xmlFile);
        }
        
        public static ToggleLocationTagCommandAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ToggleLocationTagCommandAction>(xmlFile);
        }
        
        public static ToggleLocationTagCommandAction Parse(string xml) {
            return XTypedServices.Parse<ToggleLocationTagCommandAction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToggleLocationTagCommandAction>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ToggleLocationTerminalCommandAction : XTypedElement, IXMetaData {
        
         public static explicit operator ToggleLocationTerminalCommandAction(XElement xe) { return XTypedServices.ToXTypedElement<ToggleLocationTerminalCommandAction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ToggleLocationTerminalCommandAction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ToggleLocationTerminalCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ToggleLocationTerminalCommandAction Load(string xmlFile) {
            return XTypedServices.Load<ToggleLocationTerminalCommandAction>(xmlFile);
        }
        
        public static ToggleLocationTerminalCommandAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ToggleLocationTerminalCommandAction>(xmlFile);
        }
        
        public static ToggleLocationTerminalCommandAction Parse(string xml) {
            return XTypedServices.Parse<ToggleLocationTerminalCommandAction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToggleLocationTerminalCommandAction>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ChangeLocationAnnotationTypeAction : XTypedElement, IXMetaData {
        
         public static explicit operator ChangeLocationAnnotationTypeAction(XElement xe) { return XTypedServices.ToXTypedElement<ChangeLocationAnnotationTypeAction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ChangeLocationAnnotationTypeAction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AnnotationType {
            get {
                XAttribute x = this.Attribute(XName.Get("AnnotationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AnnotationType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ChangeLocationAnnotationTypeAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ChangeLocationAnnotationTypeAction Load(string xmlFile) {
            return XTypedServices.Load<ChangeLocationAnnotationTypeAction>(xmlFile);
        }
        
        public static ChangeLocationAnnotationTypeAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ChangeLocationAnnotationTypeAction>(xmlFile);
        }
        
        public static ChangeLocationAnnotationTypeAction Parse(string xml) {
            return XTypedServices.Parse<ChangeLocationAnnotationTypeAction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ChangeLocationAnnotationTypeAction>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameters)
    /// </para>
    /// </summary>
    public partial class Action : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Action(XElement xe) { return XTypedServices.ToXTypedElement<Action>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Action() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameters)
        /// </para>
        /// </summary>
        public Action() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Parameters)
        /// </para>
        /// </summary>
        public Parameters Parameters {
            get {
                XElement x = this.GetElement(XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                return ((Parameters)(x));
            }
            set {
                this.SetElement(XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name used to refer to this action elsewhere in the XML file.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Index {
            get {
                XAttribute x = this.Attribute(XName.Get("Index", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional method name, if missing we invoke the type constructor with the parameters instead.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MethodName {
            get {
                XAttribute x = this.Attribute(XName.Get("MethodName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MethodName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Action Load(string xmlFile) {
            return XTypedServices.Load<Action>(xmlFile);
        }
        
        public static Action Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Action>(xmlFile);
        }
        
        public static Action Parse(string xml) {
            return XTypedServices.Parse<Action>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Action>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(Parameters));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Pressing the key creates an instance of the type with the following parameters passed to the constructor
    /// </para>
    /// </summary>
    public partial class Hotkey : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool ShiftDefaultValue = System.Xml.XmlConvert.ToBoolean("0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CtrlDefaultValue = System.Xml.XmlConvert.ToBoolean("0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool AltDefaultValue = System.Xml.XmlConvert.ToBoolean("0");
        
         public static explicit operator Hotkey(XElement xe) { return XTypedServices.ToXTypedElement<Hotkey>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Pressing the key creates an instance of the type with the following parameters passed to the constructor
        /// </para>
        /// </summary>
        public Hotkey() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KeyName {
            get {
                XAttribute x = this.Attribute(XName.Get("KeyName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KeyName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Action {
            get {
                XAttribute x = this.Attribute(XName.Get("Action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool Shift {
            get {
                XAttribute x = this.Attribute(XName.Get("Shift", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, ShiftDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("Shift", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool Ctrl {
            get {
                XAttribute x = this.Attribute(XName.Get("Ctrl", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CtrlDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("Ctrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, AltDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Hotkey", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Hotkey Load(string xmlFile) {
            return XTypedServices.Load<Hotkey>(xmlFile);
        }
        
        public static Hotkey Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Hotkey>(xmlFile);
        }
        
        public static Hotkey Parse(string xml) {
            return XTypedServices.Parse<Hotkey>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Hotkey>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Actions, Shortcuts)
    /// </para>
    /// </summary>
    public partial class UserSettings : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UserSettings(XElement xe) { return XTypedServices.ToXTypedElement<UserSettings>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UserSettings() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Actions", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd")), new NamedContentModelEntity(XName.Get("Shortcuts", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Actions, Shortcuts)
        /// </para>
        /// </summary>
        public UserSettings() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Actions, Shortcuts)
        /// </para>
        /// </summary>
        public ActionsLocalType Actions {
            get {
                XElement x = this.GetElement(XName.Get("Actions", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                return ((ActionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Actions", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Actions, Shortcuts)
        /// </para>
        /// </summary>
        public ShortcutsLocalType Shortcuts {
            get {
                XElement x = this.GetElement(XName.Get("Shortcuts", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                return ((ShortcutsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Shortcuts", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserSettings", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UserSettings Load(string xmlFile) {
            return XTypedServices.Load<UserSettings>(xmlFile);
        }
        
        public static UserSettings Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UserSettings>(xmlFile);
        }
        
        public static UserSettings Parse(string xml) {
            return XTypedServices.Parse<UserSettings>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserSettings>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Actions", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(ActionsLocalType));
            localElementDictionary.Add(XName.Get("Shortcuts", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(ShortcutsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
        /// </para>
        /// </summary>
        public partial class ActionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Action> ActionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CreateStructureCommandAction> CreateStructureCommandActionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ToggleStructureTagCommandAction> ToggleStructureTagCommandActionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ToggleLocationTagCommandAction> ToggleLocationTagCommandActionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ToggleLocationTerminalCommandAction> ToggleLocationTerminalCommandActionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ChangeLocationAnnotationTypeAction> ChangeLocationAnnotationTypeActionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator ActionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionsLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public ActionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public IList<Action> Action {
                get {
                    if ((this.ActionField == null)) {
                        this.ActionField = new XTypedList<Action>(this, LinqToXsdTypeManager.Instance, XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.ActionField;
                }
                set {
                    if ((value == null)) {
                        this.ActionField = null;
                    }
                    else {
                        if ((this.ActionField == null)) {
                            this.ActionField = XTypedList<Action>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<Action>(this.ActionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public IList<CreateStructureCommandAction> CreateStructureCommandAction {
                get {
                    if ((this.CreateStructureCommandActionField == null)) {
                        this.CreateStructureCommandActionField = new XTypedList<CreateStructureCommandAction>(this, LinqToXsdTypeManager.Instance, XName.Get("CreateStructureCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.CreateStructureCommandActionField;
                }
                set {
                    if ((value == null)) {
                        this.CreateStructureCommandActionField = null;
                    }
                    else {
                        if ((this.CreateStructureCommandActionField == null)) {
                            this.CreateStructureCommandActionField = XTypedList<CreateStructureCommandAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CreateStructureCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<CreateStructureCommandAction>(this.CreateStructureCommandActionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public IList<ToggleStructureTagCommandAction> ToggleStructureTagCommandAction {
                get {
                    if ((this.ToggleStructureTagCommandActionField == null)) {
                        this.ToggleStructureTagCommandActionField = new XTypedList<ToggleStructureTagCommandAction>(this, LinqToXsdTypeManager.Instance, XName.Get("ToggleStructureTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.ToggleStructureTagCommandActionField;
                }
                set {
                    if ((value == null)) {
                        this.ToggleStructureTagCommandActionField = null;
                    }
                    else {
                        if ((this.ToggleStructureTagCommandActionField == null)) {
                            this.ToggleStructureTagCommandActionField = XTypedList<ToggleStructureTagCommandAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ToggleStructureTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<ToggleStructureTagCommandAction>(this.ToggleStructureTagCommandActionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public IList<ToggleLocationTagCommandAction> ToggleLocationTagCommandAction {
                get {
                    if ((this.ToggleLocationTagCommandActionField == null)) {
                        this.ToggleLocationTagCommandActionField = new XTypedList<ToggleLocationTagCommandAction>(this, LinqToXsdTypeManager.Instance, XName.Get("ToggleLocationTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.ToggleLocationTagCommandActionField;
                }
                set {
                    if ((value == null)) {
                        this.ToggleLocationTagCommandActionField = null;
                    }
                    else {
                        if ((this.ToggleLocationTagCommandActionField == null)) {
                            this.ToggleLocationTagCommandActionField = XTypedList<ToggleLocationTagCommandAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ToggleLocationTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<ToggleLocationTagCommandAction>(this.ToggleLocationTagCommandActionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public IList<ToggleLocationTerminalCommandAction> ToggleLocationTerminalCommandAction {
                get {
                    if ((this.ToggleLocationTerminalCommandActionField == null)) {
                        this.ToggleLocationTerminalCommandActionField = new XTypedList<ToggleLocationTerminalCommandAction>(this, LinqToXsdTypeManager.Instance, XName.Get("ToggleLocationTerminalCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.ToggleLocationTerminalCommandActionField;
                }
                set {
                    if ((value == null)) {
                        this.ToggleLocationTerminalCommandActionField = null;
                    }
                    else {
                        if ((this.ToggleLocationTerminalCommandActionField == null)) {
                            this.ToggleLocationTerminalCommandActionField = XTypedList<ToggleLocationTerminalCommandAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ToggleLocationTerminalCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<ToggleLocationTerminalCommandAction>(this.ToggleLocationTerminalCommandActionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Action | CreateStructureCommandAction | ToggleStructureTagCommandAction | ToggleLocationTagCommandAction | ToggleLocationTerminalCommandAction | ChangeLocationAnnotationTypeAction)+
            /// </para>
            /// </summary>
            public IList<ChangeLocationAnnotationTypeAction> ChangeLocationAnnotationTypeAction {
                get {
                    if ((this.ChangeLocationAnnotationTypeActionField == null)) {
                        this.ChangeLocationAnnotationTypeActionField = new XTypedList<ChangeLocationAnnotationTypeAction>(this, LinqToXsdTypeManager.Instance, XName.Get("ChangeLocationAnnotationTypeAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.ChangeLocationAnnotationTypeActionField;
                }
                set {
                    if ((value == null)) {
                        this.ChangeLocationAnnotationTypeActionField = null;
                    }
                    else {
                        if ((this.ChangeLocationAnnotationTypeActionField == null)) {
                            this.ChangeLocationAnnotationTypeActionField = XTypedList<ChangeLocationAnnotationTypeAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ChangeLocationAnnotationTypeAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<ChangeLocationAnnotationTypeAction>(this.ChangeLocationAnnotationTypeActionField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Actions", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(Action));
                localElementDictionary.Add(XName.Get("CreateStructureCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(CreateStructureCommandAction));
                localElementDictionary.Add(XName.Get("ToggleStructureTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(ToggleStructureTagCommandAction));
                localElementDictionary.Add(XName.Get("ToggleLocationTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(ToggleLocationTagCommandAction));
                localElementDictionary.Add(XName.Get("ToggleLocationTerminalCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(ToggleLocationTerminalCommandAction));
                localElementDictionary.Add(XName.Get("ChangeLocationAnnotationTypeAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(ChangeLocationAnnotationTypeAction));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Hotkey*)
        /// </para>
        /// </summary>
        public partial class ShortcutsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hotkey> HotkeyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator ShortcutsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ShortcutsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ShortcutsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Hotkey", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Hotkey*)
            /// </para>
            /// </summary>
            public ShortcutsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hotkey*)
            /// </para>
            /// </summary>
            public IList<Hotkey> Hotkey {
                get {
                    if ((this.HotkeyField == null)) {
                        this.HotkeyField = new XTypedList<Hotkey>(this, LinqToXsdTypeManager.Instance, XName.Get("Hotkey", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                    }
                    return this.HotkeyField;
                }
                set {
                    if ((value == null)) {
                        this.HotkeyField = null;
                    }
                    else {
                        if ((this.HotkeyField == null)) {
                            this.HotkeyField = XTypedList<Hotkey>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hotkey", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"));
                        }
                        else {
                            XTypedServices.SetList<Hotkey>(this.HotkeyField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Shortcuts", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ShortcutsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Hotkey", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(Hotkey));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    public sealed class AnnotationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Circle",
                        "OpenCurve",
                        "ClosedCurve",
                        "Polygon",
                        "Polyline",
                        "Point",
                        "Ellipse"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AnnotationType() {
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Parameters));
            elementDictionary.Add(XName.Get("Value", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Value));
            elementDictionary.Add(XName.Get("Variable", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Variable));
            elementDictionary.Add(XName.Get("CreateStructureCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.CreateStructureCommandAction));
            elementDictionary.Add(XName.Get("ToggleStructureTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleStructureTagCommandAction));
            elementDictionary.Add(XName.Get("ToggleLocationTagCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTagCommandAction));
            elementDictionary.Add(XName.Get("ToggleLocationTerminalCommandAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTerminalCommandAction));
            elementDictionary.Add(XName.Get("ChangeLocationAnnotationTypeAction", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ChangeLocationAnnotationTypeAction));
            elementDictionary.Add(XName.Get("Action", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Action));
            elementDictionary.Add(XName.Get("Hotkey", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Hotkey));
            elementDictionary.Add(XName.Get("UserSettings", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd"), typeof(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.UserSettings));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("Parameters", "http://connectomes.utah.edu/XSD/WebAnnotationUserSettings.xsd")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Parameters Parameters {  get {return rootObject as Parameters; } }

    public Value Value {  get {return rootObject as Value; } }

    public Variable Variable {  get {return rootObject as Variable; } }

    public CreateStructureCommandAction CreateStructureCommandAction {  get {return rootObject as CreateStructureCommandAction; } }

    public ToggleStructureTagCommandAction ToggleStructureTagCommandAction {  get {return rootObject as ToggleStructureTagCommandAction; } }

    public ToggleLocationTagCommandAction ToggleLocationTagCommandAction {  get {return rootObject as ToggleLocationTagCommandAction; } }

    public ToggleLocationTerminalCommandAction ToggleLocationTerminalCommandAction {  get {return rootObject as ToggleLocationTerminalCommandAction; } }

    public ChangeLocationAnnotationTypeAction ChangeLocationAnnotationTypeAction {  get {return rootObject as ChangeLocationAnnotationTypeAction; } }

    public Action Action {  get {return rootObject as Action; } }

    public Hotkey Hotkey {  get {return rootObject as Hotkey; } }

    public UserSettings UserSettings {  get {return rootObject as UserSettings; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Parameters root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Value root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Variable root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CreateStructureCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ToggleStructureTagCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ToggleLocationTagCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ToggleLocationTerminalCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ChangeLocationAnnotationTypeAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Action root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Hotkey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UserSettings root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Parameters Parameters {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Parameters; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Value Value {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Value; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Variable Variable {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Variable; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.CreateStructureCommandAction CreateStructureCommandAction {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.CreateStructureCommandAction; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleStructureTagCommandAction ToggleStructureTagCommandAction {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleStructureTagCommandAction; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTagCommandAction ToggleLocationTagCommandAction {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTagCommandAction; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTerminalCommandAction ToggleLocationTerminalCommandAction {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTerminalCommandAction; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ChangeLocationAnnotationTypeAction ChangeLocationAnnotationTypeAction {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ChangeLocationAnnotationTypeAction; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Action Action {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Action; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Hotkey Hotkey {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Hotkey; } }

    public global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.UserSettings UserSettings {  get {return rootObject as global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.UserSettings; } }
        
        private XRoot() {
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Parameters root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Value root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Variable root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.CreateStructureCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleStructureTagCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTagCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ToggleLocationTerminalCommandAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.ChangeLocationAnnotationTypeAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Action root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.Hotkey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::connectomes.utah.edu.XSD.WebAnnotationUserSettings.xsd.UserSettings root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
